'AVC3 FOR AVC3!
'RUNS IPL, NO NEED TO COPY A PROGRAM

*&H100
JUMP <START

*&H9000
>START
'RESET EMULATED REGISTERS
MOVE 0 <R0
MOVE 0 <R1
MOVE 0 <R2
MOVE 0 <R3
MOVE 0 <R4
MOVE 0 <R5
MOVE 0 <R6
MOVE 0 <R7
MOVE 0 <R8
MOVE 0 <R9
MOVE 0 <RA
MOVE &HF000 <RB
MOVE 0 <RC
MOVE &H100 <RD
MOVE &HA000 <RE
MOVE ;@IPL <RF

'EMULATOR REGISTER LAYOUT
'R0=CURRENT INSTRUCTION
'R1-4=ITS ARGUMENTS
'R5-10=SCRATCH
MOVE <STACK11 11 'MOVE TO SMALL STACKS
MOVE <STACK12 12
LOADM <RD 13 'SET UP SCREENS
LOADM <RE 14 'SET UP SCREENS
REFR

>LOOP
LOADR <RF 0 'GET IP
'ILOADR <ILIST 0 <INSTRUCTION REFR 'DEBUG MODE
JLI+ 255 0 <DEX 'DEX ON 100 OR ABOVE
JLI+ 104 0 <UPPER 'UPPER RANGE
ILOADR <ILIST 0 15 'JUMP TO INSTRUCTION

'INSTRUCTIONS

>MOVE
<ARGF2
I 3 <IIP
R 1
FUNC _2 <WRITER
JUMP <LOOP

>COPY
<ARGF2
I 3 <IIP
FUNC _1 <READER
FUNC _2 <WRITER
JUMP <LOOP

>SWAP
<ARGF2
I 3 <IIP
FUNC _1 <READER
FUNC _2 <READER
SWAP .11 =
FUNC _2 <WRITER
FUNC _1 <WRITER
JUMP <LOOP

>JUMP
<ARGF1
STOREM 1 <RF 'MODIFY RF
JUMP <LOOP

>REFR
I 1 <IIP
LOADM <RD 13 'SET UP SCREENS
LOADM <RE 14 'SET UP SCREENS
REFR
JUMP <LOOP

>VSYNCI
<ARGF1
I 2 <IIP
VSYNCR 1 'WAIT
JUMP <LOOP

>VSYNCR
<ARGF1
I 2 <IIP
FUNC _1 <READER 'GET ARG
VSYNCR .11 'WAIT
JUMP <LOOP

>DEC
<ARGF1
I 2 <IIP
FUNC _1 <READER 'GET ARG
DEC .11 'DECREMENT IT
FUNC _1 <WRITER 'WRITE BACK OUT
JUMP <LOOP

>INC
<ARGF1
I 2 <IIP
FUNC _1 <READER 'GET ARG
INC .11 'DECREMENT IT
FUNC _1 <WRITER 'WRITE BACK OUT
JUMP <LOOP

>COMPILE
<ARGF4
I 5 <IIP
'GET NAME AND START
FUNC _1 <READER
G 1
FUNC _2 <READER
G 2
COMPILE 1 2 .11 = 'DO COMPILATION
SWAP .11 = 'SWAP RESULTS TO WRITE CORRECTLY

'WRITE OUT RESULTS
FUNC _3 <WRITER
FUNC _4 <WRITER
JUMP <LOOP

>LOAD
<ARGF4
I 5 <IIP
'GET NAME AND START
FUNC _1 <READER
G 1
FUNC _2 <READER
G 2
LOAD 1 2 .11 = 'DO COMPILATION
SWAP .11 = 'SWAP RESULTS TO WRITE CORRECTLY

'WRITE OUT RESULTS
FUNC _3 <WRITER
FUNC _4 <WRITER
JUMP <LOOP

>DATASAVE 'NOT TESTED!! TEST WITH PROGRAM THAT SAVES!
<ARGF4
I 5 <IIP
'GET START, LENGTHAND NAME
FUNC _1 <READER
G 1
FUNC _2 <READER
G 2
FUNC _3 <READER
G 3
DATASAVE 1 2 3 .11 'PERFORM SAVE
FUNC _4 <WRITER 'WRITE OUT
JUMP <LOOP

>SAVE 'NOT TESTED!! TEST WITH PROGRAM THAT SAVES!
<ARGF4
I 5 <IIP
'GET START, LENGTHAND NAME
FUNC _1 <READER
G 1
FUNC _2 <READER
G 2
FUNC _3 <READER
G 3
SAVE 1 2 3 .11 'PERFORM SAVE
FUNC _4 <WRITER 'WRITE OUT
JUMP <LOOP

>LOADR
<ARGF2
I 3 <IIP
FUNC _1 <READER 'READ SOURCE
LOADR .11 = 'GET [SOURCE]
FUNC _2 <WRITER 'WRITE TO DEST
JUMP <LOOP

>LOADM
<ARGF2
I 3 <IIP
LOADR 1 .11 'GET [SOURCE]
FUNC _2 <WRITER 'WRITE TO DEST
JUMP <LOOP

>ILOADR
<ARGF3
I 4 <IIP
FUNC _2 <READER 'READ SOURCE
RLOADR 1 .11 = 'GET [SOURCE+OFFSET]
FUNC _3 <WRITER 'WRITE TO DEST
JUMP <LOOP

>RLOADR
<ARGF3
I 4 <IIP
FUNC _1 <READER 'READ OFFSET
FUNC _2 <READER 'READ SOURCE
RLOADR .11 = = 'GET [SOURCE+OFFSET]
FUNC _3 <WRITER 'WRITE TO DEST
JUMP <LOOP

>STORER
<ARGF2
I 3 <IIP
FUNC _1 <READER 'READ SOURCE
FUNC _2 <READER 'READ DESTINATION
SWAP .11 = 'SWAP
STORER .11 = 'STORE IN MEMORY
JUMP <LOOP

>STOREM
<ARGF2
I 3 <IIP
FUNC _1 <READER 'READ SOURCE
STORER .11 2 'STORE IN MEMORY
JUMP <LOOP

>ISTORER
<ARGF3
I 4 <IIP
FUNC _1 <READER 'READ SOURCE
FUNC _2 <READER 'READ DESTINATION
SWAP .11 = 'SWAP
RSTORER .11 = 3 'STORE IN DST+OFFSET
JUMP <LOOP

>RSTORER
<ARGF3
I 4 <IIP
FUNC _1 <READER 'READ SOURCE
FUNC _2 <READER 'READ DESTINATION
FUNC _3 <READER 'READ OFFSET
G 3 'GET OFFSET
SWAP .11 = 'SWAP
RSTORER .11 = 3 'STORE IN DST+OFFSET
JUMP <LOOP

>ADDR
<ARGF4
I 5 <IIP
FUNC _1 <READER 'READ ARGS
FUNC _2 <READER
SWAP .11 = 'CORRECT ORDER
ADDR .11 = = =
SWAP .11 = 'CORRECT ORDER
FUNC _3 <WRITER 'WRITE OUT RESULTS
FUNC _4 <WRITER
JUMP <LOOP

>ADDI
<ARGF4
I 5 <IIP
FUNC _2 <READER 'GET ARG
ADDR 1 .11 = =
SWAP .11 = 'CORRECT ORDER
FUNC _3 <WRITER 'WRITE OUT RESULTS
FUNC _4 <WRITER
JUMP <LOOP

>SUBR
<ARGF4
I 5 <IIP
FUNC _1 <READER 'READ ARGS
FUNC _2 <READER
SWAP .11 = 'CORRECT ORDER
SUBR .11 = = =
SWAP .11 = 'CORRECT ORDER
FUNC _3 <WRITER 'WRITE OUT RESULTS
FUNC _4 <WRITER
JUMP <LOOP

>SUBI
<ARGF4
I 5 <IIP
FUNC _2 <READER 'GET ARG
SUBR 1 .11 = =
SWAP .11 = 'CORRECT ORDER
FUNC _3 <WRITER 'WRITE OUT RESULTS
FUNC _4 <WRITER
JUMP <LOOP

>MULR
<ARGF4
I 5 <IIP
FUNC _1 <READER 'READ ARGS
FUNC _2 <READER
SWAP .11 = 'CORRECT ORDER
MULR .11 = = =
SWAP .11 = 'CORRECT ORDER
FUNC _3 <WRITER 'WRITE OUT RESULTS
FUNC _4 <WRITER
JUMP <LOOP

>MULI
<ARGF4
I 5 <IIP
FUNC _2 <READER 'GET ARG
MULR 1 .11 = =
SWAP .11 = 'CORRECT ORDER
FUNC _3 <WRITER 'WRITE OUT RESULTS
FUNC _4 <WRITER
JUMP <LOOP

>DIVR
<ARGF4
I 5 <IIP
FUNC _1 <READER 'READ ARGS
FUNC _2 <READER
SWAP .11 = 'CORRECT ORDER
DIVR .11 = = =
SWAP .11 = 'CORRECT ORDER
FUNC _3 <WRITER 'WRITE OUT RESULTS
FUNC _4 <WRITER
JUMP <LOOP

>DIVI
<ARGF4
I 5 <IIP
FUNC _2 <READER 'GET ARG
DIVR 1 .11 = =
SWAP .11 = 'CORRECT ORDER
FUNC _3 <WRITER 'WRITE OUT RESULTS
FUNC _4 <WRITER
JUMP <LOOP

>TWO
<ARGF2
I 3 <IIP
FUNC _1 <READER 'GET ARG
TWO .11 = 'INVERT!
FUNC _2 <WRITER 'WRITE RESULT
JUMP <LOOP

>ANDR
<ARGF3
I 4 <IIP
FUNC _1 <READER 'GET ARGS
FUNC _2 <READER
ANDR .11 = =
FUNC _3 <WRITER 'WRITE RESULT
JUMP <LOOP

>ANDI
<ARGF3
I 4 <IIP
FUNC _2 <READER 'GET ARG
ANDR 1 .11 =
FUNC _3 <WRITER 'WRITE RESULT
JUMP <LOOP

>ORR
<ARGF3
I 4 <IIP
FUNC _1 <READER 'GET ARGS
FUNC _2 <READER
ORR .11 = =
FUNC _3 <WRITER 'WRITE RESULT
JUMP <LOOP

>ORI
<ARGF3
I 4 <IIP
FUNC _2 <READER 'GET ARG
ORR 1 .11 =
FUNC _3 <WRITER 'WRITE RESULT
JUMP <LOOP

>XORR
<ARGF3
I 4 <IIP
FUNC _1 <READER 'GET ARGS
FUNC _2 <READER
XORR .11 = =
FUNC _3 <WRITER 'WRITE RESULT
JUMP <LOOP

>XORI
<ARGF3
I 4 <IIP
FUNC _2 <READER 'GET ARG
XORR 1 .11 =
FUNC _3 <WRITER 'WRITE RESULT
JUMP <LOOP

>NOT
<ARGF2
I 3 <IIP
FUNC _1 <READER 'GET ARG
NOT .11 =
FUNC _2 <WRITER 'WRITE RESULT
JUMP <LOOP

>LEFTR
<ARGF4
I 5 <IIP
FUNC _1 <READER 'GET ARGS
FUNC _2 <READER
SWAP .11 = 'CORRECT ORDER
LEFTR .11 = = =
SWAP .11 = 'CORRECT ORDER
FUNC _3 <WRITER 'WRITE RESULT
FUNC _4 <WRITER 'WRITE RESULT
JUMP <LOOP

>LEFTI
<ARGF4
I 5 <IIP
FUNC _2 <READER
LEFTR 1 .11 = =
SWAP .11 =
FUNC _3 <WRITER 'WRITE RESULT
FUNC _4 <WRITER 'WRITE RESULT
JUMP <LOOP


>RIGHTR
<ARGF4
I 5 <IIP
FUNC _1 <READER 'GET ARGS
FUNC _2 <READER
SWAP .11 = 'CORRECT ORDER
RIGHTR .11 = = =
SWAP .11 = 'CORRECT ORDER
FUNC _3 <WRITER 'WRITE RESULT
FUNC _4 <WRITER 'WRITE RESULT
JUMP <LOOP

>RIGHTI
<ARGF4
I 5 <IIP
FUNC _2 <READER
RIGHTR 1 .11 = =
SWAP .11 =
FUNC _3 <WRITER 'WRITE RESULT
FUNC _4 <WRITER 'WRITE RESULT
JUMP <LOOP

>TRUE
<ARGF2
I 3 <IIP
FUNC _1 <READER 'GET ARG
TRUE .11 =
FUNC _2 <WRITER 'WRITE RESULT
JUMP <LOOP

>SIGN
<ARGF2
I 3 <IIP
FUNC _1 <READER 'GET ARG
SIGN .11 =
FUNC _2 <WRITER 'WRITE RESULT
JUMP <LOOP

>RND
<ARGF1
I 2 <IIP
RND .11
FUNC _1 <WRITER 'WRITE RESULT
JUMP <LOOP

>TOUCH
<ARGF3
I 4 <IIP
TOUCH .11 .11 4 'GET TOUCH DATA
SWAP .11 = 'CORRECT ORDER
FUNC _1 <WRITER 'WRITE X
FUNC _2 <WRITER 'WRITE Y
R 4
FUNC _3 <WRITER 'WRITE T
JUMP <LOOP

>CLIPR
<ARGF2
I 3 <IIP
FUNC _1 <READER 'GET ARG
CLIPR .11 = 'CLIP
FUNC _2 <WRITER 'WRITE RESULT
JUMP <LOOP

>CLIPI
<ARGF2
I 3 <IIP
CLIPR 1 .11 'CLIP
FUNC _2 <WRITER 'WRITE RESULT
JUMP <LOOP

>CLIPL
<ARGF1
I 2 <IIP
CLIPL .11
FUNC _1 <WRITER 'WRITE LENGTH
JUMP <LOOP

>BUTTON
<ARGF1
I 2 <IIP
BUTTON .11
FUNC _1 <WRITER 'GET BUTTON
JUMP <LOOP

>MIL
<ARGF2
I 3 <IIP
MIL .11 =
SWAP .11 = 'CORRECT ORDER
FUNC _1 <WRITER
FUNC _2 <WRITER
JUMP <LOOP

>TIME
<ARGF3
I 4 <IIP
TIME .11 .11 4 'GET TIME DATA
SWAP .11 = 'CORRECT ORDER
FUNC _1 <WRITER 'WRITE HOUR
FUNC _2 <WRITER 'WRITE MINUTE
R 4
FUNC _3 <WRITER 'WRITE SECOND
JUMP <LOOP

>DATE
<ARGF3
I 4 <IIP
DATE .11 .11 4 'GET DATE DATA
SWAP .11 = 'CORRECT ORDER
FUNC _1 <WRITER 'WRITE YEAR
FUNC _2 <WRITER 'WRITE MONTH
R 4
FUNC _3 <WRITER 'WRITE DAY
JUMP <LOOP

>OUT
<ARGF1
I 2 <IIP
FUNC _1 <READER 'GET OUT BYTE
OUT .11 'OUT
JUMP <LOOP

>BEEP
<ARGF2
I 3 <IIP
FUNC _1 <READER 'GET INSTRUMENT
FUNC _2 <READER 'GET PITCH
SWAP .11 = 'CORRECT ORDER
BEEP .11 = 'BEEP
JUMP <LOOP

'IMPLEMENTS ALL 3-ARG CONDITIONAL JUMPS
>TAKEN3
COPY 3 <RF 'REWRITE RF
JUMP <LOOP

'IMPLEMENTS FORK INSTRUCTIONS
>TAKEN4
COPY 4 <RF 'REWRITE RF
JUMP <LOOP

>JER
<ARGF3
I 4 <IIP
FUNC _1 <READER 'GET R1
FUNC _2 <READER 'GET R2
JER .11 = <TAKEN3 'TAKEN BRANCH?
JUMP <LOOP

>JEI
<ARGF3
I 4 <IIP
FUNC _2 <READER 'GET R2
JER 1 .11 <TAKEN3 'TAKEN BRANCH?
JUMP <LOOP

>JNR
<ARGF3
I 4 <IIP
FUNC _1 <READER 'GET R1
FUNC _2 <READER 'GET R2
JNR .11 = <TAKEN3 'TAKEN BRANCH?
JUMP <LOOP

>JNI
<ARGF3
I 4 <IIP
FUNC _2 <READER 'GET R2
JNR 1 .11 <TAKEN3 'TAKEN BRANCH?
JUMP <LOOP

>JGR+
<ARGF3
I 4 <IIP
FUNC _1 <READER 'GET R1
FUNC _2 <READER 'GET R2
JLR+ .11 = <TAKEN3 'TAKEN BRANCH?
JUMP <LOOP

>JGR-
<ARGF3
I 4 <IIP
FUNC _1 <READER 'GET R1
FUNC _2 <READER 'GET R2
JLR- .11 = <TAKEN3 'TAKEN BRANCH?
JUMP <LOOP

>JGI+
<ARGF3
I 4 <IIP
FUNC _2 <READER 'GET R2
JGR+ 1 .11 <TAKEN3 'TAKEN BRANCH?
JUMP <LOOP

>JGI-
<ARGF3
I 4 <IIP
FUNC _2 <READER 'GET R2
JGR- 1 .11 <TAKEN3 'TAKEN BRANCH?
JUMP <LOOP

>JLR+
<ARGF3
I 4 <IIP
FUNC _1 <READER 'GET R1
FUNC _2 <READER 'GET R2
JGR+ .11 = <TAKEN3 'TAKEN BRANCH?
JUMP <LOOP

>JLR-
<ARGF3
I 4 <IIP
FUNC _1 <READER 'GET R1
FUNC _2 <READER 'GET R2
JGR- .11 = <TAKEN3 'TAKEN BRANCH?
JUMP <LOOP

>JLI+
<ARGF3
I 4 <IIP
FUNC _2 <READER 'GET R2
JLR+ 1 .11 <TAKEN3 'TAKEN BRANCH?
JUMP <LOOP

>JLI-
<ARGF3
I 4 <IIP
FUNC _2 <READER 'GET R2
JLR- 1 .11 <TAKEN3 'TAKEN BRANCH?
JUMP <LOOP

>FORKR+
<ARGF4
I 5 <IIP
FUNC _1 <READER
FUNC _2 <READER
FORKR+ .11 = <TAKEN4 <TAKEN3 'CORRECT ORDER
JUMP <LOOP

>FORKR-
<ARGF4
I 5 <IIP
FUNC _1 <READER
FUNC _2 <READER
FORKR- .11 = <TAKEN4 <TAKEN3 'CORRECT ORDER
JUMP <LOOP

>FORKI+
<ARGF4
I 5 <IIP
FUNC _2 <READER
FORKR+ 1 .11 <TAKEN3 <TAKEN4 'CORRECT ORDER
JUMP <LOOP

>FORKI-
<ARGF4
I 5 <IIP
FUNC _2 <READER
FORKR- 1 .11 <TAKEN3 <TAKEN4 'CORRECT ORDER
JUMP <LOOP

>PUSHR
<ARGF2
I 3 <IIP
FUNC _1 <READER 'GET DATA
R 2 'GET STACK
<VPUSH 'PUSH
JUMP <LOOP

>PUSHI
<ARGF2
I 3 <IIP
FUNC &B110 <VPUSH 'PUSH
JUMP <LOOP

>POP
<ARGF2
I 3 <IIP
FUNC _1 <VPOP 'POP FROM SP
FUNC _2 <WRITER 'WRITE TO REGISTER
JUMP <LOOP

>R
<ARGF1
I 2 <IIP
FUNC _1 <READER 'SEND DATA
I 11
<VPUSH 'PUSH
JUMP <LOOP

>I
<ARGF1
I 2 <IIP
R 1 'SEND DATA
I 11
<VPUSH 'PUSH
JUMP <LOOP

>G
<ARGF1
I 2 <IIP
I 11
<VPOP 'GET FROM S11
FUNC _1 <WRITER 'WRITE TO REGISTER
JUMP <LOOP

>PSR
<ARGF1
I 2 <IIP
FUNC _1 <READER 'SEND DATA
I 12
<VPUSH 'PUSH
JUMP <LOOP

>RSR
<ARGF1
I 2 <IIP
I 12
<VPOP 'GET FROM S12
FUNC _1 <WRITER 'WRITE TO REGISTER
JUMP <LOOP

>S
<ARGF1
I 2 <IIP
R 1 'SEND BIT MASK
I 11
<BPUSH 'BULK PUSH
JUMP <LOOP

>REC
<ARGF1
I 2 <IIP
R 1 'SEND BIT MASK
I 11
<BPOP 'BULK POP
JUMP <LOOP

>PE
<ARGF1
I 2 <IIP
R 1 'SEND BIT MASK
I 12
<BPUSH 'BULK PUSH
JUMP <LOOP

>RE_
<ARGF1
I 2 <IIP
R 1 'SEND BIT MASK
I 12
<BPOP 'BULK POP
JUMP <LOOP

>PR
<ARGF2
I 3 <IIP

R 1 'SEND BIT MASK
I 12
<BPUSH 'BULK PUSH

R 2 'SEND BIT MASK
I 11
<BPOP 'BULK POP
JUMP <LOOP

>SR
<ARGF2
I 3 <IIP

R 1 'SEND BIT MASK
I 11
<BPUSH 'BULK PUSH

R 2 'SEND BIT MASK
I 12
<BPOP 'BULK POP
JUMP <LOOP

>[
<ARGF1
I 2 <IIP

R <RF 'GET RF
I 12
<VPUSH 'PUSH IP TO STACK
STOREM 1 <RF 'SET RF
JUMP <LOOP

>]
I 12
<VPOP 'GET NEW IP
STOREM .11 <RF 'SET IP
JUMP <LOOP

>EXIT
<ARGF1
R 1 'SEND BIT MASK
I 12
<BPOP 'BULK POP

I 12
<VPOP 'GET NEW IP
STOREM .11 <RF 'SET IP
JUMP <LOOP

>FUNC
<ARGF2
I 3 <IIP

R 1 'SEND BIT MASK
I 11
<BPUSH 'SEND ARGS

R <RF 'GET RF
I 12
<VPUSH 'PUSH IP TO STACK

STOREM 2 <RF 'SET RF
JUMP <LOOP

>SRE
<ARGF2
R 1 'SEND BIT MASK
I 11
<BPUSH 'SEND

R 2 'SEND BIT MASK
I 12
<BPOP 'RECOVER

I 12
<VPOP 'GET NEW IP
STOREM .11 <RF 'SET IP
JUMP <LOOP

>STOREIR
<ARGF2
I 3 <IIP
FUNC _2 <READER 'GET STORE ADDRESS
STORER 1 .11
JUMP <LOOP

>STOREIM
<ARGF2
I 3 <IIP
STORER 1 2
JUMP <LOOP

>SDIVR
<ARGF4
I 5 <IIP
FUNC _1 <READER 'READ ARGS
FUNC _2 <READER
SWAP .11 = 'CORRECT ORDER
SDIVR .11 = = =
SWAP .11 = 'CORRECT ORDER
FUNC _3 <WRITER 'WRITE OUT RESULTS
FUNC _4 <WRITER
JUMP <LOOP

>SDIVI
<ARGF4
I 5 <IIP
FUNC _2 <READER 'GET ARG
SDIVR 1 .11 = =
SWAP .11 = 'CORRECT ORDER
FUNC _3 <WRITER 'WRITE OUT RESULTS
FUNC _4 <WRITER
JUMP <LOOP

>ROLR
<ARGF3
I 4 <IIP
FUNC _1 <READER 'GET ARG
FUNC _2 <READER
SWAP .11 = 'CORRECT ORDER
ROLR .11 = =
FUNC _3 <WRITER 'WRITE OUT RESULTS
JUMP <LOOP

>ROLI
<ARGF3
I 4 <IIP
FUNC _2 <READER
SWAP .11 = 'CORRECT ORDER
ROLR .11 = =
FUNC _3 <WRITER 'WRITE OUT RESULTS
JUMP <LOOP

>RORR
<ARGF3
I 4 <IIP
FUNC _1 <READER 'GET ARG
FUNC _2 <READER
SWAP .11 = 'CORRECT ORDER
RORR .11 = =
FUNC _3 <WRITER 'WRITE OUT RESULTS
JUMP <LOOP

>RORI
<ARGF3
I 4 <IIP
FUNC _2 <READER
SWAP .11 = 'CORRECT ORDER
RORR .11 = =
FUNC _3 <WRITER 'WRITE OUT RESULTS
JUMP <LOOP

>JAR
<ARGF3
I 4 <IIP
FUNC _1 <READER 'GET R1
FUNC _2 <READER 'GET R2
JER .11 = <TAKEN3 'TAKEN BRANCH?
JUMP <LOOP

>JAI
<ARGF3
I 4 <IIP
FUNC _2 <READER 'GET R2
JER 1 .11 <TAKEN3 'TAKEN BRANCH?
JUMP <LOOP

>DECODE
<ARGF2
I 3 <IIP
FUNC _1 <READER 'GET ARG
DECODE .11 =
FUNC _2 <WRITER 'WRITE RESULT
JUMP <LOOP

>MCOPYR
<ARGF3
I 4 <IIP
FUNC _1 <READER
G 1
FUNC _2 <READER
G 2
FUNC _3 <READER
G 3
MCOPYR 1 2 3 'PERFORM COPY
JUMP <LOOP

>MCOPYI
<ARGF3
I 4 <IIP
FUNC _2 <READER
G 2
FUNC _3 <READER
G 3
MCOPYR 1 2 3 'PERFORM COPY
JUMP <LOOP

>MFILLR
<ARGF3
I 4 <IIP
FUNC _1 <READER
G 1
FUNC _2 <READER
G 2
FUNC _3 <READER
G 3
MFILLR 1 2 3 'PERFORM COPY
JUMP <LOOP

>MFILLI
<ARGF3
I 4 <IIP
FUNC _2 <READER
G 2
FUNC _3 <READER
G 3
MFILLR 1 2 3 'PERFORM COPY
JUMP <LOOP


'DEX

>DEX
I 1 <IIP
R <RF 'GET RF
I 12
<VPUSH 'PUSH IP TO STACK
STOREM 0 <RF 'SET RF
JUMP <LOOP



'NOP

>UPPER
I 1 <IIP
JUMP <LOOP

'UTILITY SUBROUTINES
>IIP ADDR .11 <RF = % ] 'INCREMENT IP BY ARG

'SETS UP REGISTERS FOR N-ARGUMENT INSTRUCTION
>ARGF4 ILOADR 4 <RF 4
>ARGF3 ILOADR 3 <RF 3
>ARGF2 ILOADR 2 <RF 2
>ARGF1 ILOADR 1 <RF 1
]

'VIRTUAL PUSH
'DATA, STACK
'->

>VPUSH
REC &B110000000 'GET DATA
FUNC _8 <READER 'GET REGISTER
DEC .11 'DECREMENT IT
STORER 7 ,11 'PERFORM PUSH
FUNC _8 <WRITER 'WRITE REGISTER BACK
]

'VIRTUAL POP
'STACK
'-> DATA

>VPOP
REC _8 'GET STACK
FUNC _8 <READER 'GET SP
LOADR ,11 .11 'GET CONTENTS
SWAP .11 = 'PUT SP AT TOP
INC .11 'INCREMENT SP
FUNC _8 <WRITER 'SET SP
]

'BULK PUSH
'BITMASK, STACK
'->
>BPUSH 'BP
REC &B110000000 'GET DATA

'R7=BM
'R8=STACK
MOVE 0 9 'R9=COUNTER

>BP_LOOP
JEI 0 7 <BP_EXIT 'DONE?
ANDI 1 7 .11 'GET BIT
JEI 0 .11 <BP_SKIP 'SKIP?

PE &B110000000 'PRESERVE
FUNC _9 <READER 'GET REGISTER
FUNC _8 <VPUSH 'PUSH!
RE &B110000000 'RECOVER

>BP_SKIP
RIGHTI 1 7 = % 'BM>>1
INC 9 'COUNTER++
JUMP <BP_LOOP

>BP_EXIT
]

'BULK POP
'BITMASK, STACK
'->
>BPOP 'BO
REC &B110000000 'GET DATA

'R7=BM
'R8=STACK
MOVE 15 9 'R9=COUNTER

>BO_LOOP
JEI 0 7 <BO_EXIT 'DONE?
ANDI _F 7 .11 'GET BIT
JEI 0 .11 <BO_SKIP 'SKIP?

PE &B110000000 'PRESERVE
FUNC _8 <VPOP 'POP
FUNC _9 <WRITER 'WRITE TO REGISTER
RE &B110000000 'RECOVER

>BO_SKIP
LEFTI 1 7 = % 'BM<<1
DEC 9 'COUNTER--
JUMP <BO_LOOP

>BO_EXIT
]






>READER
G 5 'GET ARG INTO R5
FORKI+ &H90 5 <RMEM <RREG 'HANDLE ZERO+PT
I 0 'RETURN ZERO
]

>RREG
'PRECALCULATE ADDRESS OF <R0 + R
ANDI &HF 5 6
ADDI <R0 6 = %

JGI+ &H10 5 <RNORMAL 'NORMAL ADDRESSING
JGI+ &H20 5 <RPOP 'POP ADDRESSING
JGI+ &H30 5 <RPOINT 'POINTER ADDRESSING
JGI+ &H40 5 <RQM '?X ADDRESSING
JGI+ &H50 5 <RX-- 'POSTDEC ADDRESSING
JGI+ &H60 5 <RX++ 'POSTINC ADDRESSING
JGI+ &H70 5 <R--X 'PREINC ADDRESSING
JGI+ &H80 5 <R++X 'PREDEC ADDRESSING
JGI+ &H90 5 <R!X 'NOT ADDRESSING

>HALT
HALT 'UNREACHABLE HALT!!

>RMEM
LOADR 5 .11 'READ MEMORY
]

>RNORMAL 'NORMAL ADDRESSING
LOADR 6 .11
]

>RPOP 'POP ADDRESSING
LOADR ,6 .11
INC ,6 'INCREMENT SP
]

>RPOINT 'POINTER ADDRESSING
LOADR ,6 .11
]

>RQM '?X ADDRESSING
ANDI &HF 5 6
RLOADR <RB 6 .11
]

>RX-- 'POSTDEC ADDRESSING
LOADR 6 .11
DEC ,6
]

>RX++ 'POSTINC ADDRESSING
LOADR 6 .11
INC ,6
]

>R--X 'PREINC ADDRESSING
DEC ,6
LOADR 6 .11
]

>R++X 'PREDEC ADDRESSING
INC ,6
LOADR 6 .11
]

>R!X 'NOT ADDRESSING
LOADR 6 .11
NOT .11 =
]




>WRITER
G 5 'GET ARG INTO R5
FORKI+ &H90 5 <WMEM <WREG 'HANDLE ZERO+PT
INC 11 'NOP
]

>WREG
'PRECALCULATE ADDRESS OF <R0 + R
ANDI &HF 5 6
ADDI <R0 6 = %

JGI+ &H10 5 <WNORMAL 'NORMAL ADDRESSING
JGI+ &H20 5 <WPOP 'POP ADDRESSING
JGI+ &H30 5 <WPOINT 'POINTER ADDRESSING
JGI+ &H40 5 <WQM '?X ADDRESSING
JGI+ &H50 5 <WX-- 'POSTDEC ADDRESSING
JGI+ &H60 5 <WX++ 'POSTINC ADDRESSING
JGI+ &H80 5 <W++--X 'PREDEC ADDRESSING
JGI+ &H90 5 <W!X 'NOT ADDRESSING

HALT 'UNREACHABLE HALT!!

>WMEM
STORER .11 5 'WRITE MEMORY
]

>WNORMAL 'NORMAL ADDRESSING
STORER .11 6
]

>WPOP 'POP ADDRESSING
DEC ,6 'DECREMENT SP
STORER .11 ,6
]

>WPOINT 'POINTER ADDRESSING
STORER .11 ,6
]

>WQM '?X ADDRESSING
ANDI &HF 5 6
RSTORER .11 6 <RB
]

>WX-- 'POSTDEC ADDRESSING
STORER .11 6
DEC ,6
]

>WX++ 'POSTINC ADDRESSING
STORER .11 6
INC ,6
]

>W++--X 'PREDEC/INC ADDRESSING (NOP)
INC 11
]

>W!X
NOT .11 =
STORER .11 6
]




'STACK SPACE (TO NOT INTERFERE WITH SIMULATED STACKS)
+&H20
>STACK12
+&H20
>STACK11

'CURRENT INSTRUCTION FOR DEBUG
>INSTRUCTION 0

'REGISTERS
>R0 0
>R1 0
>R2 0
>R3 0
>R4 0
>R5 0
>R6 0
>R7 0
>R8 0
>R9 0
>RA 0
>RB &HF000
>RC 0
>RD &H100
>RE &HA000
>RF ;@IPL 'START IPL

'INSTRUCTION LIST
>ILIST
<HALT
<MOVE
<COPY
<SWAP
<JUMP
<REFR
<VSYNCI
<VSYNCR
<DEC
<INC
<COMPILE
<LOAD
<DATASAVE
<SAVE
<LOADR
<LOADM
<ILOADR
<RLOADR
<STORER
<STOREM
<ISTORER
<RSTORER
<ADDR
<ADDI
<SUBR
<SUBI
<MULR
<MULI
<DIVR
<DIVI
<TWO
<ANDR
<ANDI
<ORR
<ORI
<XORR
<XORI
<NOT
<LEFTR
<LEFTI
<RIGHTR
<RIGHTI
<TRUE
<SIGN
<RND
<TOUCH
<CLIPR
<CLIPI
<CLIPL
<BUTTON
<MIL
<TIME
<DATE
<OUT
<BEEP
<JER
<JEI
<JNR
<JNI
<JGR+
<JGR-
<JGI+
<JGI-
<JLR+
<JLR-
<JLI+
<JLI-
<FORKR+
<FORKR-
<FORKI+
<FORKI-
<PUSHR
<PUSHI
<POP
<R
<I
<G
<PSR
<RSR
<S
<REC
<PE
<RE_
<PR
<SR
<[
<]
<EXIT
<FUNC
<SRE
<STOREIR
<STOREIM
<SDIVR
<SDIVI
<ROLR
<ROLI
<RORR
<RORI
<JAR
<JAI
<DECODE
<MCOPYR
<MCOPYI
<MFILLR
<MFILLI

