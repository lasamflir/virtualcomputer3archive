*&H100

>START
;@34
;@CLS
'CHIP-8 FOR AVC2

'LOAD

;@QPRINT 'PRINT LOADPROMPT
$Program:
0
I <C8_MEM 'LOAD PROGRAM FROM C8 START
ADDI &H200 .11 = % 'ADD OFFSET
I 1 'FILE
;@INPUT_LOAD 'LOAD C8 PROGRAM
REC _01 'GET RETURN VALUES
JEI 0 1 <START 'LOAD FAIL?

MOVE <C8_MEM 13
ADDI &H200 13 = %
REFR
;@CLS
;@13

'CONFIGURE CONTROLS
I <CONTROL_PROMPT 'PRINT CONTROLS MESSAGE
;@BPRINT
I ;FILE
;@BPRINT
I !. ;@PC
;@NL
;@NL
MOVE <C8K 14
REFR

>CONFIG_LOOP
'GET BUTTON BEING ASSIGNED
;@RBTN
COPY ,11 0 'GET RESULT
'CONVERT BUTTON TO SYMBOL
;@NUM_BTN
G 1 'GET RESULT
JEI 768 0 <CONFIG_EXIT '+ PRESSED?
JER 0 1 <CONFIG_LOOP 'INVALID BUTTON PRESS

R 1
;@PC 'PRINT BUTTON DURING ASSIGNMENT
REFR

'GET A PRESS
;@RTOUCH 'MAKE SURE THE SCREEN IS TOUCHED
;@TOUCH
;@TCHAR 'GET CHARACTERS
REC _235 'R2=X R3=Y R5=T

'GET ADDRESS OF BUTTON IN BUTTON MAP
R 0
I <BMAP
I <BLOC
;@SWAPTABLE
LOADR ,11 6 'GET COPY OF BUTTON'S PREV VALUE

'GET C8 KEY THAT WAS PRESSED
SUBI 4 2 = % 'X-4
SUBI 3 3 = % 'Y-3
DIVI 8 2 = = 'X/8
DIVI 6 3 = = 'Y/6
MULI 8 2 = = 'X*8
MULI 6 3 = = 'Y*6
ADDI 5 2 = % 'X+5
ADDI 4 3 = % 'Y+4
FUNC _235 ;@TADDRESS 'CALCULATE ADDRESS
REC _235
COPY 3 .11 'PRESERVE R3
LOADR 2 3 'GET C8 KEY
JEI 0 .11 <CONFIG_BEZEL 'TOUCH INSIDE BEZEL?
MOVE !G 3 'UNASSIGN BUTTON

>CONFIG_BEZEL
FUNC _6 ;@I_D 'GET OLD DIGIT
G 6 'WRITE INTO R6
JEI !G 6 <WRITE1_SKIP 'NOTHING TO ERASE?

'ERASE BUTTON SYMBOL FROM C8 KEY
I <C8K 'SEARCH IN C8 KEYS
I &H300 'A SCREEN-LENGTH
R 6 'GET DIGIT OF OLD KEY
;@SFFIND 'FIND KEY
REC _45 'GET LOCATION INTO R4
ADDI 2 4 = % 'ADD TWO
STOREIR 32 4 'ERASE BUTTON THERE

>WRITE1_SKIP
R 3
;@D_I 'GET DIGIT
STORER .11 = 'STORE DIGIT IN BUTTON MAP

JEI !G 3 <WRITE2_SKIP 'SKIP 1ST BUTTON?

'WRITE BUTTON SYMBOL ONTO C8 KEY
ADDI 2 2 = % 'MOVE ALONG TWO
R 0
;@NUM_BTN 'GET SYMBOL
STORER .11 2 'WRITE SYMBOL

>WRITE2_SKIP
I 8 ;@PC 'ERASE BUTTON SYMBOL DURING ASSIGNMENT
REFR 'UPDATE KEYMAP ON SCREEN
JUMP <CONFIG_LOOP

>CONFIG_EXIT

'CHIP-8 INTERPRETER STARTS HERE
;@CLS

'PLACE PIXEL GRID ON SCREEN
ADDI &H80 ;_PIXEL_OFFSET = % 'COMMENT OUT IN DEBUG MODE!

'MAIN LOOP
MOVE &H200 0 'R0=C8 IP
MOVE 0 1 'R1=FETCHED OPCODE
MIL 2 =  'R2=MS OF LAST FRAME
MOVE 0 3 'R3=SOUND TIMER
MOVE 0 4 'R4=DELAY TIMER
MOVE 0 5 'R5=INDEX REGISTER
MOVE &HFE00 10 'R10=C8 CALL STACK
REFR

>MAIN 'MAIN LOOP!!

'UPDATE TIMERS

MIL % .11 'GET CURRENT MS COUNT
SUBR 2 .11 = % 'SUBTRACT LAST COUNT
JGI- 17 .11 <TIMESKIP
MIL 2 = 'GET NEW MS COUNT

JEI 0 3 <SOUNDSKIP 'SOUND PLAYING?
DEC 3 'DECREMENT SOUND COUNTER
BEEP % = 'BEEP

>SOUNDSKIP
JEI 0 4 <TIMESKIP 'SOUND PLAYING?
DEC 4 'DECREMENT SOUND COUNTER

>TIMESKIP

'FETCH

ILOADR <C8_MEM 0 6 'GET UPPER BYTE
ILOADR <C8_MEM+ 0 1 'GET LOWER BYTE
LEFTI 8 6 = % 'SHIFT UP UPPER BYTE
ORR 6 1 = 'GET FULL INSTRUCTION

'<DEBUGMODE REFR 'PRINT DEBUG INFO

'DECODE
RIGHTI 12 1 6 % 'GET FIRST DIGIT
ILOADR <INLIST 6 15 'JUMP TO INSTRUCTION

>8??? '8-SERIES
ANDI &HF 1 6
ILOADR <INLIST8 6 15 'JUMP TO INSTRUCTION

>9??? '9-"SERIES"
ANDI &HF 1 6
JEI &H0 6 <9??0
JUMP <C8IP++

'SIMPLE INSTRUCTIONS
>0???
JEI &H00E0 1 <00E0
JEI &H00EE 1 <00EE
JUMP <C8IP++

'EXECUTE

>00E0 'CLEAR SCREEN
;@CLS
JUMP <C8IP++

>00EE 'RETURN FROM SUBROUTINE
POP 10 0 'GET RETURN ADDRESS
JUMP <C8IP++

>1??? 'JP ADDR
ANDI &HFFF 1 0 'COPY ADDRESS INTO IP
JUMP <MAIN

>2??? 'CALL ADDR
PUSHR 0 10 'PRESERVE IP
ANDI &HFFF 1 0 'COPY ADDRESS INTO IP
JUMP <MAIN

>3??? 'SE VX, BYTE
ANDI &HFF 1 6 'GET BYTE
ANDI &HF00 1 7 'MASK OUT REGISTER
RIGHTI 8 7 = % 'GET REGISTER NUMBER
ILOADR <C8R 7 = 'GET REGISTER CONTENTS
JNR 6 7 <C8IP++ 'ADVANCE NORMALLY IF UNEQUAL
INC )0 'SKIP INSTRUCTION
JUMP <C8IP++

>4??? 'SNE VX, BYTE
ANDI &HFF 1 6 'GET BYTE
ANDI &HF00 1 7 'MASK OUT REGISTER
RIGHTI 8 7 = % 'GET REGISTER NUMBER
ILOADR <C8R 7 = 'GET REGISTER CONTENTS
JER 6 7 <C8IP++ 'ADVANCE NORMALLY IF EQUAL
INC )0 'SKIP INSTRUCTION
JUMP <C8IP++

>5???
ANDI &HF 1 6 'GET LAST NIBBLE
JNI 0 6 <C8IP++ 'IS IT NONZERO?

>5??0 'SE VX, VY
ANDI &HF00 1 7 'MASK OUT R1
ANDI &HF0 1 8 'MASK OUT R2
RIGHTI 8 7 = % 'SHIFT DOWN
RIGHTI 4 8 = % 'SHIFT DOWN
ILOADR <C8R 7 = 'GET REGISTER CONTENTS
ILOADR <C8R 8 = 'GET REGISTER CONTENTS
JNR 7 8 <C8IP++ 'ARE THEY UNEQUAL?
INC )0 'SKIP
JUMP <C8IP++

>6??? 'LD VX, BYTE
ANDI &HFF 1 7 'MASK OUT BYTE
ANDI &HF00 1 8 'MASK OUT REGISTER
RIGHTI 8 8 = % 'SHIFT DOWN REGISTER
ISTORER 7 8 <C8R 'WRITE TO REGISTER
JUMP <C8IP++

>7??? 'ADD VX, BYTE
ANDI &HFF 1 7 'MASK OUT BYTE
ANDI &HF00 1 8 'MASK OUT REGISTER
RIGHTI 8 8 = % 'SHIFT DOWN REGISTER
ILOADR <C8R 8 9 'GET REGISTER CONTENTS
ADDR 7 9 = % 'ADD VX AND BYTE
ANDI &HFF 9 = 'LIMIT TO BYTE
ISTORER 9 8 <C8R 'WRITE TO REGISTER
JUMP <C8IP++

>8??0 'LD VX, VY
ANDI &HF0 1 8 'MASK OUT SOURCE REGISTER
RIGHTI 4 8 = % 'SHIFT DOWN REGISTER
ILOADR <C8R 8 = 'READ FROM REGISTER
ANDI &HF00 1 9 'MASK OUT DESTINATION REGISTER
RIGHTI 8 9 = % 'SHIFT DOWN REGISTER
ISTORER 8 9 <C8R 'PERFORM STORE
JUMP <C8IP++

>8??1 'OR VX, VY
ANDI &HF0 1 8 'MASK OUT SOURCE REGISTER
RIGHTI 4 8 = % 'SHIFT DOWN REGISTER
ILOADR <C8R 8 = 'READ FROM REGISTER

ANDI &HF00 1 9 'MASK OUT DESTINATION REGISTER
RIGHTI 8 9 = % 'SHIFT DOWN REGISTER
R 9 'PRESERVE POINTER
ILOADR <C8R 9 = 'READ FROM REGISTER

ORR 9 8 = 'OR REGISTERS TOGETHER
G 9 'RECOVER POINTER
ISTORER 8 9 <C8R 'STORE RESULT
JUMP <C8IP++

>8??2 'AND VX, VY
ANDI &HF0 1 8 'MASK OUT SOURCE REGISTER
RIGHTI 4 8 = % 'SHIFT DOWN REGISTER
ILOADR <C8R 8 = 'READ FROM REGISTER

ANDI &HF00 1 9 'MASK OUT DESTINATION REGISTER
RIGHTI 8 9 = % 'SHIFT DOWN REGISTER
R 9 'PRESERVE POINTER
ILOADR <C8R 9 = 'READ FROM REGISTER

ANDR 9 8 = 'AND REGISTERS TOGETHER
G 9 'RECOVER POINTER
ISTORER 8 9 <C8R 'STORE RESULT
JUMP <C8IP++

>8??3 'XOR VX, VY
ANDI &HF0 1 8 'MASK OUT SOURCE REGISTER
RIGHTI 4 8 = % 'SHIFT DOWN REGISTER
ILOADR <C8R 8 = 'READ FROM REGISTER

ANDI &HF00 1 9 'MASK OUT DESTINATION REGISTER
RIGHTI 8 9 = % 'SHIFT DOWN REGISTER
R 9 'PRESERVE POINTER
ILOADR <C8R 9 = 'READ FROM REGISTER

XORR 9 8 = 'XOR REGISTERS TOGETHER
G 9 'RECOVER POINTER
ISTORER 8 9 <C8R 'STORE RESULT
JUMP <C8IP++

>8??4 'ADD VX, VY
ANDI &HF0 1 8 'MASK OUT SOURCE REGISTER
RIGHTI 4 8 = % 'SHIFT DOWN REGISTER
ILOADR <C8R 8 = 'READ FROM REGISTER

ANDI &HF00 1 9 'MASK OUT DESTINATION REGISTER
RIGHTI 8 9 = % 'SHIFT DOWN REGISTER
ADDI <C8R 9 = % 'FORM POINTER
R 9 'PRESERVE POINTER
LOADR 9 = 'READ FROM REGISTER

ADDR 9 8 = % 'ADD REGISTERS TOGETHER
ANDI &H100 8 7 'GET VALUE OF VF
RIGHTI 8 7 <VF % 'SHIFT IT DOWN
ANDI &HFF 8 = 'RESTRICT RESULT
G 9 'RECOVER POINTER
STORER 8 9 'STORE RESULT
JUMP <C8IP++

>8??5 'SUB VX, VY
ANDI &HF0 1 8 'MASK OUT SOURCE REGISTER
RIGHTI 4 8 = % 'SHIFT DOWN REGISTER
ILOADR <C8R 8 = 'READ FROM REGISTER

ANDI &HF00 1 9 'MASK OUT DESTINATION REGISTER
RIGHTI 8 9 = % 'SHIFT DOWN REGISTER
ADDI <C8R 9 = % 'FORM POINTER
R 9 'PRESERVE POINTER
LOADR 9 = 'READ FROM REGISTER

SUBR 8 9 8 % 'SUB REGISTERS
ANDI &H100 8 7 'GET VALUE OF VF
RIGHTI 8 7 = % 'SHIFT IT DOWN
XORI 1 7 <VF 'FLIP IT
ANDI &HFF 8 = 'RESTRICT RESULT
G 9 'RECOVER POINTER
STORER 8 9 'STORE RESULT
JUMP <C8IP++

>8??6 'SHR VX
ANDI &HF00 1 7 'MASK OUT REGISTER
RIGHTI 8 7 = % 'SHIFT IT DOWN
ILOADR <C8R 7 8 'READ FROM REGISTER

ANDI 1 8 <VF 'GET LAST BIT
RIGHTI 1 8 = % 'SHIFT REGISTER RIGHT
ISTORER 8 7 <C8R 'STORE IN REGISTER
JUMP <C8IP++

>8??7 'SUBN VX, VY
ANDI &HF0 1 8 'MASK OUT SOURCE REGISTER
RIGHTI 4 8 = % 'SHIFT DOWN REGISTER
ILOADR <C8R 8 = 'READ FROM REGISTER

ANDI &HF00 1 9 'MASK OUT DESTINATION REGISTER
RIGHTI 8 9 = % 'SHIFT DOWN REGISTER
ADDI <C8R 9 = % 'FORM POINTER
R 9 'PRESERVE POINTER
LOADR 9 = 'READ FROM REGISTER

SUBR 9 8 = % 'SUB REGISTERS
ANDI &H100 8 7 'GET VALUE OF VF
RIGHTI 8 7 = % 'SHIFT IT DOWN
XORI 1 7 <VF 'FLIP IT
ANDI &HFF 8 = 'RESTRICT RESULT
G 9 'RECOVER POINTER
STORER 8 9 'STORE RESULT
JUMP <C8IP++

>8??E 'SHL VX
ANDI &HF00 1 7 'MASK OUT REGISTER
RIGHTI 8 7 = % 'SHIFT IT DOWN
ILOADR <C8R 7 8 'READ FROM REGISTER

ANDI &H80 8 9 'GET FIRST BIT
RIGHTI 7 9 <VF % 'SHIFT IT DOWN
LEFTI 1 8 = % 'SHIFT REGISTER LEFT
ANDI &HFF 8 = 'RESTRICT VALUE
ISTORER 8 7 <C8R 'STORE IN REGISTER
JUMP <C8IP++

>9??0 'SNE VX, VY
ANDI &HF00 1 7 'MASK OUT REGISTER
RIGHTI 8 7 = % 'SHIFT IT DOWN
ILOADR <C8R 7 =

ANDI &HF0 1 8 'MASK OUT REGISTER
RIGHTI 4 8 = % 'SHIFT IT DOWN
ILOADR <C8R 8 = 'READ FROM REGISTER

JER 7 8 <C8IP++ 'ADVANCE NORMALLY IF EQUAL
INC )0 'SKIP INSTRUCTION
JUMP <C8IP++

>A??? 'LD I, ADDR
ANDI &HFFF 1 5 'MASK OUT VALUE INTO I
JUMP <C8IP++

>B??? 'JP V0, ADDR
LOADM <C8R 7 'LOAD V0
ANDI &HFFF 1 8 'MASK OUT VALUE
ADDR 7 8 0 % 'ADD THEM TOGETHER INTO IP
JUMP <MAIN

>C??? 'RND VX, BYTE
ANDI &HFF 1 6 'MASK OUT BYTE
RND 7 'FORM RANDOM NUMBER
ANDR 7 6 = 'AND TOGETHER
ANDI &HF00 1 7 'MASK OUT REGISTER
RIGHTI 8 7 = % 'SHIFT IT DOWN
ISTORER 6 7 <C8R 'STORE IN REGISTER
JUMP <C8IP++

>D??? 'DRAW VX, VY, NIBBLE
ANDI &HF00 1 .11 'GET VX
RIGHTI 8 .11 = % 'SHIFT DOWN

ANDI &HF0 1 .11 'GET VY
RIGHTI 4 .11 = % 'SHIFT DOWN

ANDI &HF 1 .11 'GET NIBBLE
<DRAWSPRITE 'CALL SPRITE DRAW ROUTINE
STOREM .11 <VF 'STORE FLAG RESULT
REFR
JUMP <C8IP++

>E???
ANDI &HFF 1 6
JEI &H9E 6 <E?9E
JEI &HA1 6 <E?A1
JUMP <C8IP++

>F???
ANDI &HFF 1 6
JEI &H07 6 <F?07
JEI &H0A 6 <F?0A
JEI &H15 6 <F?15
JEI &H18 6 <F?18
JEI &H1E 6 <F?1E
JEI &H29 6 <F?29
JEI &H33 6 <F?33
JEI &H55 6 <F?55
JEI &H65 6 <F?65
JUMP <C8IP++


>E?9E 'SKP VX
ANDI &HF00 1 7 'MASK OUT VALUE
RIGHTI 8 7 = % 'SHIFT IT DOWN
ILOADR <C8R 7 = 'GET VALUE
<C8GETKEY 'GET KEYPRESS
G 8
JNR 7 8 <E?9ESKIPSKIP 'IS KEY BEING PRESSED?
INC )0 'SKIP INSTRUCTION
>E?9ESKIPSKIP
JUMP <C8IP++

>E?A1 'SKNP VX
ANDI &HF00 1 7 'MASK OUT VALUE
RIGHTI 8 7 = % 'SHIFT IT DOWN
ILOADR <C8R 7 = 'GET VALUE
<C8GETKEY 'GET KEYPRESS
G 8
JER 7 8 <E?A1SKIPSKIP 'IS KEY BEING PRESSED?
INC )0 'SKIP INSTRUCTION
>E?A1SKIPSKIP
JUMP <C8IP++

>F?07
ANDI &HF00 1 7 'MASK OUT VALUE
RIGHTI 8 7 = % 'SHIFT IT DOWN
ISTORER 4 7 <C8R 'PUT DELAY TIMER IN VX
JUMP <C8IP++

>F?0A
<C8GETKEY 'GET KEY
JEI 16 .11 <F?0A 'IS IT NOTHING?
ANDI &HF00 1 7 'MASK OUT VX
RIGHTI 8 7 = % 'SHIFT IT DOWN
<C8GETKEY
ISTORER .11 7 <C8R
JUMP <C8IP++

>F?15
ANDI &HF00 1 7 'MASK OUT VX
RIGHTI 8 7 = % 'SHIFT IT DOWN
ILOADR <C8R 7 4 'PUT VX IN DELAY TIMER
JUMP <C8IP++

>F?18 'LD ST, VX
ANDI &HF00 1 7 'MASK OUT VALUE
RIGHTI 8 7 = % 'SHIFT IT DOWN
ILOADR <C8R 7 3 'PUT VX IN SOUND TIMER
JUMP <C8IP++

>F?1E 'ADD I, VX
ANDI &HF00 1 7 'MASK OUT VALUE
RIGHTI 8 7 = % 'SHIFT IT DOWN
ILOADR <C8R 7 = 'GET VX
ADDR 7 5 = % 'SET I
ANDI &H0FFF 5 = 'RESTRICT I
JUMP <C8IP++

>F?29
ANDI &HF00 1 7 'MASK OUT VALUE
RIGHTI 8 7 = % 'SHIFT IT DOWN
ILOADR <C8R 7 = 'GET VX
MULI 5 7 5 = 'MULTIPLY BY 5 AND STORE
JUMP <C8IP++

>F?33
ANDI &HF00 1 7 'MASK OUT VALUE
RIGHTI 8 7 = % 'SHIFT IT DOWN
ILOADR <C8R 7 = 'GET VALUE
COPY 5 8 'GET IREG
ADDI <C8M 8 6 % 'CREATE POINTER
DIVI 100 7 9 = 'GET FIRST DIGIT
STORER 9 6 'STORE IT
INC 8 'INCREMENT POINTER
ANDI &HFFF 8 = 'RESTRICT IT
ADDI <C8M 8 6 % 'CREATE POINTER
DIVI 10 7 9 = 'GET SECOND DIGIT
DIVI 10 9 = %
STORER 9 6 'STORE IT
INC 8 'INCREMENT POINTER
ANDI &HFFF 8 = 'RESTRICT IT
ADDI <C8M 8 6 % 'CREATE POINTER
DIVI 10 7 9 % 'GET LAST DIGIT
STORER 9 6 'STORE IT
JUMP <C8IP++


>F?55
ANDI &HF00 1 6 'MASK OUT COUNTER
RIGHTI 8 6 = % 'SHIFT IT DOWN
COPY 5 7 'GET IREG
ADDI <C8M 7 8 % 'FORM POINTER
MOVE 0 9 'REGISTER COUNTER

PE &B10000100000 'PRESERVE R5 AND R10
'R5=SCRATCH
'R6=MAXIMUM
'R7=IREG COUNTER
'R8=IREG POINTER
'R9=REGISTER COUNTER
ADDI <C8R 9 10 % 'R10=REGISTER POINTER

>F?55LOOP
LOADR 10 ,8 'GET REGISTER AND WRITE TO MEMORY
ANDI &HFFF }7 = 'INC N' RESTRICT IT
INC 9 'INCREMENT REGISTER COUNTER
'UPDATE POINTERS
ADDI <C8M 7 8 % 'FORM POINTER
ADDI <C8R 9 10 % 'R10=REGISTER POINTER
JGR+ 6 9 <F?55LOOP 'REPEAT UNTIL LIMIT
JER 6 9 <F?55LOOP 'REPEAT UNTIL LIMIT

>F?55EXIT
RE &B10000100000 'RECOVER R5 AND R10
JUMP <C8IP++

>F?65
ANDI &HF00 1 6 'MASK OUT COUNTER
RIGHTI 8 6 = % 'SHIFT IT DOWN
COPY 5 7 'GET IREG
ADDI <C8M 7 8 % 'FORM POINTER
MOVE 0 9 'REGISTER COUNTER

PE &B10000100000 'PRESERVE R5 AND R10
'R5=SCRATCH
'R6=MAXIMUM
'R7=IREG COUNTER
'R8=IREG POINTER
'R9=REGISTER COUNTER
ADDI <C8R 9 10 % 'R10=REGISTER POINTER

>F?65LOOP
LOADR 8 ,10 'READ MEMORY AND GET REGISTER
ANDI &HFFF }7 = 'INC N' RESTRICT IT
INC 9 'INCREMENT REGISTER COUNTER
'UPDATE POINTERS
ADDI <C8M 7 8 % 'FORM POINTER
ADDI <C8R 9 10 % 'R10=REGISTER POINTER
JGR+ 6 9 <F?65LOOP 'REPEAT UNTIL LIMIT
JER 6 9 <F?65LOOP 'REPEAT UNTIL LIMIT

>F?65EXIT
RE &B10000100000 'RECOVER R5 AND R10
JUMP <C8IP++



>C8IP++
INC )0 'INCREMENT IP
JGI+ &H1000 0 <MAIN 'JUMP TO MAIN
MOVE 0 0 'ROLLOVER IP
JUMP <MAIN

'DRAW SPRITE
'VX, VY, NIBBLE

>DRAWSPRITE
PR _01234 _012
ILOADR <C8R 0 = 'R0=VX
ILOADR <C8R 1 = 'R1=VY
'R2=N
'R3=F
COPY 5 6 'TEMP SPRITE SOURCE

>YLOOP 'Y DRAWING LOOP
JEI 0 (2 <DRAW_END 'END OF SPRITE?
JLI+ 31 1 <DRAW_END 'OUT OF RANGE?

'GET SPRITE BYTE
ILOADR <C8_MEM )6 4 'GET SPRITE BYTE

'DRAW A SINGLE LINE
FUNC _014 <DRAWLINE

INC 1 'ADVANCE Y
JUMP <YLOOP 'REPEAT UNTIL DONE DRAWING

>DRAW_END
SRE _3 _01234 'SEND FLAG

'DRAW A SINGLE LINE OF PIXELS
'X, Y, BYTE

>DRAWLINE
PR _012 _012

LEFTI 8 2 = % 'RIGHT-ALIGN BYTE

>DLOOP
JLI- -1 2 <DL_SKIP 'NO PIXEL?
JNI 0 3 <D_CS 'CHECK SKIP?

FUNC _01 ;@@PXTEST 'TEST PIXEL
ORR .11 3 = 'OR COLLISION INTO FLAG

>D_CS
FUNC _01 ;@@PXFLIP 'SIMPLY FLIP!
'REFR ';:;:;:;:

>DL_SKIP
LEFTI 1 2 = % 'ADVANCE!
JEI 0 2 <DQUIT 'NO MORE PIXELS?
JGI+ 64 }0 <DLOOP 'IN RANGE?

>DQUIT
EXIT _012

>C8GETKEY
PE _0123
'CHECK BUTTON FIRST
BUTTON 0
JNI 0 0 <C8G_BUTTON 'BUTTON PRESSED?

'CHECK THE SCREEN
;@TOUCH
;@TCHAR
REC &B111
JEI 0 2 <NOTOUCH 'DETECT NONTOUCHES
SUBI 4 0 = % 'X-4
SUBI 3 1 = % 'Y-3
DIVI 8 0 = = 'X/8
DIVI 6 1 = = 'Y/6
MULI 8 0 = = 'X*8
MULI 6 1 = = 'Y*6
ADDI 5 0 = % 'X+5
ADDI 4 1 = % 'Y+4
'SEND &B111
FUNC &B111 ;@TADDRESS 'CALCULATE ADDRESS
REC &B111
JNI 0 1 <NOTOUCH 'TOUCH OUTSIDE BEZEL?
LOADR 0 =
R 0
;@D_I 'GET DIGIT
EXIT &B1111

>NOTOUCH
I 16
EXIT &B1111

>C8G_BUTTON
'BUTTON IS IN R0, FIND IT IN MAP
R 0
I <BMAP
I <BLOC
;@SWAPTABLE
G 0 'R0=LOCATION IN BUTTON MAP
R ,0 'READ IT
EXIT _0123


>DEBUGMODE
STOREIM &H200 ;_CUR

'STOREIM ;LIB_END ;_CUR 'RESET CURSOR
R 0 'C8 IP
;@HEX 'PRINT IT
I <4SP 'PRINT FOUR SPACES
;@BPRINT
R 1 'OPCODE
;@HEX 'PRINT IT
I <4SP 'PRINT FOUR SPACES
;@BPRINT
R 3 'SOUND
;@HEX 'PRINT IT
I <4SP 'PRINT FOUR SPACES
;@BPRINT
R 4 'DELAY
;@HEX 'PRINT IT
I <4SP 'PRINT FOUR SPACES
;@BPRINT
;@NL
MOVE 0 6 'REGISTER COUNTER

>DBLOOP 'PRINT REMAINING REGISTERS
JEI 16 6 <DBESC 'ESCAPE IF END REACHED
ADDI <C8_REG 6 7 % 'FORM A REGISTER POINTER
LOADR 7 = 'READ FROM IT
R 7 'C8 REGISTER
;@HEX 'PRINT IT
I <4SP 'PRINT FOUR SPACES
;@BPRINT
INC 6 'INCREMENT COUNTER
JUMP <DBLOOP

>DBESC
;@NL
R 5 'INDEX
;@HEX 'PRINT IT
I <4SP 'PRINT FOUR SPACES
;@BPRINT

ILOADR <C8_MEM 5 .11 'PEEK INDEX
;@HEX 'PRINT IT
I <4SP 'PRINT FOUR SPACES
;@BPRINT

R 10 'CALL STACK
;@HEX 'PRINT IT
I <4SP 'PRINT FOUR SPACES
;@BPRINT

R ,10 'PEEK CALL STACK
;@HEX 'PRINT IT
]

>4SP 'FOUR SPACES
32 32 32 32 0

>INLIST 'INSTRUCTION DECODING LIST
<0???
<1??? 'HANDLE EACH OPCODE RANGE
<2???
<3???
<4???
<5???
<6???
<7???
<8???
<9???
<A???
<B???
<C???
<D???
<E???
<F???

>INLIST8
<8??0
<8??1
<8??2
<8??3
<8??4
<8??5
<8??6
<8??7
<C8IP++ '8
<C8IP++ '9
<C8IP++ 'A
<C8IP++ 'B
<C8IP++ 'C
<C8IP++ 'D
<8??E
<C8IP++ 'F

>HALT HALT 'SOMETHING'S GONE VERY BADLY WRONG!
'DATA
>CONTROL_PROMPT
$Press a button, then press its
10
$corresponding Chip-8 key to
10
$assign it.
10
10
$To unassign a button, tap the
10
$screen border.
10
10
$Hold + to run 
0

'BUTTON MAP REFERENCE
>BMAP
1 2 4 8 16 32 64 128 256 512 2048 4096

>BLOC
<B_UP
<B_DOWN
<B_LEFT
<B_RIGHT
<B_A
<B_B
<B_X
<B_Y
<B_L
<B_R
<B_ZR
<B_ZL

'BUTTON MAP (16=UNASSIGNED!)
>B_UP 16
>B_DOWN 16
>B_LEFT 16
>B_RIGHT 16
>B_A 16
>B_B 16
>B_X 16
>B_Y 16
>B_L 16
>B_R 16
>B_ZR 16
>B_ZL 16

>C8K
$
$1     2     3     C     
$                        
$                        
$                        
$
$
$4     5     6     D     
$                        
$                        
$                        
$
$
$7     8     9     E     
$                        
$                        
$                        
$
$
$A     0     B     F     
$                        
$                        
$                        
$

>C8_MEM 'CHIP-8 MEMORY
>C8M
'DIGITS (ACCESSED BY ADDING OFFSET TO C8MEM)
&HF0 '0
>C8_MEM+ 'USED FOR FETCHING INSTRUCTIONS
&H90
&H90
&H90
&HF0

&H20 '1
&H60
&H20
&H20
&H70

&HF0 '2
&H10
&HF0
&H80
&HF0

&HF0 '3
&H10
&HF0
&H10
&HF0

&H90 '4
&H90
&HF0
&H10
&H10

&HF0 '5
&H80
&HF0
&H10
&HF0

&HF0 '6
&H80
&HF0
&H90
&HF0

&HF0 '7
&H10
&H20
&H40
&H40

&HF0 '8
&H90
&HF0
&H90
&HF0

&HF0 '9
&H90
&HF0
&H10
&HF0

&HF0 'A
&H90
&HF0
&H90
&H90

&HE0 'B
&H90
&HE0
&H90
&HE0

&HF0 'C
&H80
&H80
&H80
&HF0

&HE0 'D
&H90
&H90
&H90
&HE0

&HF0 'E
&H80
&HF0
&H80
&HF0

&HF0 'F
&H80
&HF0
&H80
&H80
+&H1000

>C8_REG
>C8R
0
>V1
0
>V2
0
>V3
0
>V4
0
>V5
0
>V6
0
>V7
0
>V8
0
>V9
0
>VA
0
>VB
0
>VC
0
>VD
0
>VE
0
>VF
0

