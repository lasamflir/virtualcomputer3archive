*&H100
MOVE 30 10 'DEFAULT DIFFICULTY
>RESET
MOVE &HF000 11 'SET UP STACK
MOVE ;LIB_END 13 'PUT TERMINAL ON SCREEN
MOVE <MINES 14 'BLANK LOWER SCREEN
REFR 'CLEAR MACHINE CODE OFF SCREEN
I <WELCOMETEXT 'PUSH TEXT
;@BPRINT 'PRINT IT
REFR 'REFRESH
>SPLASHLOOP1
BUTTON 0 'GET BUTTON
JNI 16 0 <SPLASHLOOP1 'LOOP WHILE IT'S NOT A
>SPLASHLOOP2
BUTTON 0 'GET BUTTON
JNI 0 0 <SPLASHLOOP2 'LOOP WHILE IT'S ANYTHING
;@CLS 'CLEAR THE SCREEN

>DIFFICULTY
'BOUNDS CHECKING
JEI 0 10 <UNDERFLOW
JLI+ &H8000 10 <UNDERFLOW
JLI+ &H2D2 10 <OVERFLOW
JEI &H2D2 10 <OVERFLOW
BUTTON 0 'GET BUTTON
JNI 0 0 <DIFFICULTY 'WAIT WHILE IT'S NOT ZERO
STOREIM 0 ;_CUR 'RESET CURSOR
R 10 'PUSH DIFFICULTY
;@DEC 'PRINT IT

REFR
>DLOOP
BUTTON 0 'GET BUTTON
JEI 0 0 <DLOOP 'NOTHING?
JEI 1 0 <UP1 'UP?
JEI 2 0 <DOWN1 'UP?
JEI 4 0 <DOWN10 'LEFT?
JEI 8 0 <UP10 'RIGHT?
JEI #A 0 <STARTN 'A?
JEI #B 0 <STARTT 'B?

JUMP <DLOOP 'INVALID?

>UP1
INC 10 '+1 MINES
JUMP <DIFFICULTY

>DOWN1
DEC 10 '-1 MINES
JUMP <DIFFICULTY

>UP10
ADDI 10 10 = % '+10 MINES
JUMP <DIFFICULTY

>DOWN10
SUBI 10 10 = % '-10 MINES
JUMP <DIFFICULTY

>OVERFLOW
MOVE &H2D1 10 'RESET MINECOUNT TO MAX
JUMP <DIFFICULTY

>UNDERFLOW
MOVE 1 10 'RESET MINECOUNT TO MIN
JUMP <DIFFICULTY

>STARTN 'START THE MINESWEEPER GAME
MOVE 0 5 'NORMAL MODE
JUMP <START

>STARTT
MOVE 1 5 'TRAINING MODE

>START
STOREIM 0 ;_CUR 'RESET CURSOR
I <PLEASEWAIT 'PUSH WAIT TEXT
;@BPRINT 'PRINT IT
REFR 'PLACE IT ON THE SCREEN
STOREIM 0 ;_CUR 'RESET CURSOR
MOVE &H300 1 'CHARACTER COUNTER
>LOOP 'FILL SCREEN WITH TILES
I ! 'PUSH 
;@PC 'CALL TERMINAL
DEC 1 'DECREMENT LOOP COUNTER
JNI 0 1 <LOOP 'REPEAT UNTIL SCREEN FILLED
'PLACE THE MINES
MOVE &H300 1 'CHARACTER COUNTER
MOVE <MINES 2 'MEMORY COUNTER
>0LOOP 'FILL SCREEN WITH ZERO
STOREIR !0 2 'PLACE A ZERO
DEC 1 'DECREMENT LOOP COUNTER
INC 2 'INCREMENT MEMORY COUNTER
JNI 0 1 <0LOOP 'REPEAT UNTIL SCREEN FILLED
COPY 10 0
>MINELOOP
'MINES ARE  CHARACTERS AND FLAGS ARE 
'R0=NUMBER OF MINES TO PLACE
'R1=MINE LOCATION
'R2=READS IN LOCATIONS
'R3=SCRATCHPAD
'PLACE A MINE IN A FREE SPOT, THEN INCREMENT ALL NON-MINE SPOTS AROUND IT, UNLESS THEY CROSS OVER A ROW BOUNDARY OR ARE OFFSCREEN
RND 1 'GENERATE A MINE POSITION
ANDI &H3FF 1 = 'AND IT WITH LIMITING BITMASK
DIVI 32 1 3 % 'MOD 32
'COPY 1 3 'MAKE A COPY
'MODI 32 3 'MOD 32
JEI 30 3 <MINELOOP 'LEAVE A BLANK COLUMN
JEI 31 3 <MINELOOP 'LEAVE A BLANK COLUMN
JLI+ &H2FF 1 <MINELOOP 'GENERATE ANOTHER UNTIL IT'S VALID
ADDI <MINES 1 = % 'ADD MINES OFFSET
LOADR 1 2 'READ LOCATION
JEI ! 2 <MINELOOP 'IS MINE POSITION TAKEN?
'MINE POSITION IS VALID
STOREIR ! 1 'STORE THE MINE IN THE GRID.
'INCREMENT THE NUMBERS AROUND THE MINE
SUBI &H41 1 = %'-1,-2
<NUMINC
ADDI 2 1 = %'1,-2
<NUMINC
ADDI &H1D 1 = %'-2,-1
<NUMINC
ADDI 4 1 = %'2,-1
<NUMINC
ADDI &H3C 1 = %'-2,1
<NUMINC
ADDI 4 1 = %'2,1
<NUMINC
ADDI &H1D 1 = %'-1,2
<NUMINC
ADDI 2 1 = %'1,2
<NUMINC
DEC 0 'DEC MINECOUNT
JNI 0 0 <MINELOOP 'LOOP

'CLEAR ZEROES AND LAST COLUMN
'LAST COLUMN
'R0=COUNTER
MOVE <MINES 0 'SET UP COUNTERS
MOVE ;LIB_END 2
DEC 0 'SUBTRACT 2 FROM BOTH
DEC 2
DEC 0
DEC 2
>LCLOOP
ADDI 32 0 = % 'ADVANCE COLUMN COUNTERS
ADDI 32 2 = %
LOADR 0 1 'READ COLUMN
JEI 0 1 <LCESC 'ESCAPE IF SCREEN END REACHED
STOREIR 32 0 'RESET LAST COLUMNS
STOREIR 32 2
INC 0
INC 2
STOREIR 32 0 'RESET LAST COLUMNS
STOREIR 32 2
DEC 0
DEC 2
JUMP <LCLOOP 'REPEAT
>LCESC
'REMOVE ZEROES
MOVE &H300 1 'CHARACTER COUNTER
MOVE <MINES 2 'MEMORY COUNTER
>NLOOP 'REMOVE ZERO
LOADR 2 3
JNI !0 3 <NULLSKIP
STOREIR !· 2 'PLACE A SPACE
>NULLSKIP
DEC 1 'DECREMENT LOOP COUNTER
INC 2 'INCREMENT MEMORY COUNTER
JNI 0 1 <NLOOP 'REPEAT UNTIL SCREEN FILLED



MOVE ;LIB_END 13
MOVE ;LIB_END 14 'PUT TERMINAL ON BOTH DISPLAYS

'GAMEPLAY:
'HOLDING A BUTTON PLACES OR REMOVES A FLAG
'ONCE ALL BOMBS ARE FLAGGED AND REMAINING GRID CLEARED (ALL BUT ACCURATE FLAGS REMAIN), THE PLAYER WINS.
'IF A PLAYER TOUCHES A MINE, THEY LOSE
'R0-2:TOUCH INPUT
'R3: BUTTON STATUS
'R5:TRAINING MODE SWITCH

>GAMEPLAY
REFR

>GAMEPLAY2
TOUCH 1 2 0 'GET TOUCH STATUS
BUTTON 3 'GET BUTTON STATUS
JEI 0 0 <GAMEPLAY2 'WAIT UNTIL TOUCH DOWN

>GTWAIT
TOUCH 4 = 0 'GET TOUCH STATUS
JNI 0 0 <GTWAIT 'WAIT UNTIL TOUCH UP
'USER HAS TOUCHED A SQUARE, CALCULATE WHICH ONE
DIVI 8 1 = ='X=X8
DIVI 8 2 = ='Y=Y8
SUBI 4 1 = % 'X=X-4
SUBI 3 2 = % 'X=X-4
JLI+ &H1F 1 <GAMEPLAY 'CHECK BOUNDS OF X
JLI+ &H17 2 <GAMEPLAY 'CHECK BOUNDS OF Y

MULI 32 2 = = 'Y=Y*32
ADDR 1 2 = % 'R2=Y*32+X
ADDI ;LIB_END 2 = % 'R2=MEMORY ADDRESS
JNI 0 3 <FLAG 'JUMP TO FLAG CODE
R 2 'PUSH TOUCH ADDRESS
<DIG 'DIG
JUMP <CHECK 'CHECK THE BOARD

>FLAG
LOADR 2 3 'GET CURRENT GRID SPACE
JEI ! 3 <FLAGSET
JEI ! 3 <FLAGRESET
BUTTON 3 'RECOVER BUTTON
JEI 256 3 <GAMEPLAY 'PREVENT TRIGGERS
JEI 512 3 <GAMEPLAY 'FROM 8-CLEARING
COPY 2 1 'PERFORM AN 8-CLEAR
<DIGR 'CALL THE RECURSIVE PORTION OF DIG
JUMP <CHECK 'CHECK THE BOARD

>FLAGSET
STOREIR ! 2 'SET FLAG
JUMP <GAMEPLAY

>FLAGRESET
STOREIR ! 2 'RESET FLAG
JUMP <GAMEPLAY

>DIG
G 1 'GET DIG SPOT
LOADR 1 0 'GET [DIG SPOT]
JNI ! 0 <DR 'RETURN IF UNCOVERED
'ADD MINES OFFSET
SUBI ;LIB_END 1 = %
ADDI <MINES 1 = %
'ADDI &H400 1 = % 'ADD MINES OFFSET

LOADR 1 0 'GET MINES
'SUBI &H400 1 = % 'SUB MINES OFFSET
SUBI <MINES 1 = %
ADDI ;LIB_END 1 = %

STORER 0 1 'UPDATE DISPLAY

JNI 1 5 <NORM 'NORMAL MODE?
FUNC _1 <INFER 'PERFORM INFERENCE ON SURROUNDING CLUES
>NORM
REFR 'ANIMATE RECURSIVE DIGS

JEI ! 0 <GAMEOVER 'DETECT EXPLOSION
JNI !· 0 <DR 'SKIP RECURSION UNLESS SPACE
>DIGR 'RECURSIVE PART OF DIG
SUBI &H41 1 .11 % '-1,-2
SUBI &H3F 1 .11 % '1,-2
SUBI &H22 1 .11 % '-2,-1
SUBI &H1E 1 .11 % '2,-1
ADDI &H1E 1 .11 % '-2,1
ADDI &H22 1 .11 % '2,1
ADDI &H3F 1 .11 % '-1,2
ADDI &H41 1 .11 % '1,2
<DIG
<DIG
<DIG
<DIG
<DIG
<DIG
<DIG
<DIG
'REFR
>DR
]

>CHECK
MOVE ;LIB_END 0 'SCREEN COUNTER
MOVE <MINES 1 'MINES COUNTER

>CL
LOADR )0 2 'GET SCREEN CHR
LOADR )1 3 'GET MINES CHR
JEI 0 3 <VICTORY 'DETECT EDGE OF THE SCREEN
JEI ! 2 <WINCHECK 'DETECT COVERED SPOTS
JEI ! 2 <WINCHECK 'DETECT COVERED SPOTS
JUMP <CL

>WINCHECK 'CHECK FOR BOMB
JNI ! 3 <GAMEPLAY 'IF THERE ISN'T ONE, PLAYER'S NOT WON YET
JUMP <CL 'RETURN

>GAMEOVER 'PRINT GAME OVER MESSAGE
MOVE <MINES 14
REFR
BUTTON 0 'GET BUTTON
JNI 0 0 <GAMEOVER 'WAIT UNTIL RELEASE
;@CLS
I <DEADTEXT
;@BPRINT
REFR
JUMP <ENDGAME

>VICTORY 'PRINT VICTORY MESSAGE
MOVE <MINES 14
REFR
BUTTON 0 'GET BUTTON
JNI 0 0 <VICTORY 'WAIT UNTIL RELEASE
;@CLS
I <VICTORYTEXT
;@BPRINT
REFR

>ENDGAME
BUTTON 0 'WAIT FOR ANY BUTTON
JEI 0 0 <ENDGAME
;@CLS 'ERASE THE SCREEN
JUMP <RESET


'SUBROUTINES

'NUMBER INCREMENTER
>NUMINC
LOADR 1 2 'GET NUMBER AT LOCATION
JNI ! 2 <NUMBER 'IS IT A MINE?
] 'RETURN IF SO

>NUMBER
INC 2 'INCREMENT THE NUMBER
STORER 2 1 'STORE IT
]





'INFER WHICH SURROUNDING CLUES ARE CORRECT
>INFER
PR &B111111 &B1
'R0=DIG SPOT
'R1=OFFSET
'R2=SCRATCH
'R3-5=USED IN OTHER SUBROUTINES

'IF NOT  OR SPACE, CHECK CLUE
'IF SATISFIED, REPLACE 12345678 WITH 
'IF NOT SATISFIED, DO THE OPPOSITE

MOVE &HFFBF 1 '-1 -2
RLOADR 0 1 2 'GET SQUARE
<INCHECK 'CHECK

MOVE &HFFC1 1 '1 -2
RLOADR 0 1 2 'GET SQUARE
<INCHECK 'CHECK

MOVE &HFFDE 1 '-2 1
RLOADR 0 1 2 'GET SQUARE
<INCHECK 'CHECK



MOVE &HFFE2 1 '2 -1
RLOADR 0 1 2 'GET SQUARE
<INCHECK 'CHECK

MOVE 0 1 'MIDDLE
RLOADR 0 1 2 'GET SQUARE
<INCHECK 'CHECK

MOVE &H1E 1 '-2 1
RLOADR 0 1 2 'GET SQUARE
<INCHECK 'CHECK



MOVE &H22 1 '2 1
RLOADR 0 1 2 'GET SQUARE
<INCHECK 'CHECK

MOVE &H3F 1 '-1 2
RLOADR 0 1 2 'GET SQUARE
<INCHECK 'CHECK

MOVE &H41 1 '1 2
RLOADR 0 1 2 'GET SQUARE
<INCHECK 'CHECK

EXIT &B111111

>INCHECK 'CHECK RANGE OF CLUE THEN CALL
JEI ! 2 <NOCHECK 'HIDDEN?
JEI !· 2 <NOCHECK 'SPACE?
JEI ! 2 <NOCHECK 'HIDDEN?
JEI ! 2 <NOCHECK 'MINE?
JEI 0 2 <NOCHECK 'EDGE OF DISPLAY?

<CLUECHANGE 'FINALLY EXAMINE THE CLUE

>NOCHECK
]



>CLUECHANGE
'R2=ADDRESS
'R3=OFFSET
MOVE 0 4 'R4=COUNTER
'R5=SCRATCH
ADDR 0 1 2 % 'CREATE ADDRESS OF CLUE

MOVE &HFFBF 3 '-1 -2
RLOADR 2 3 5 'GET SQUARE
<INCHECK2 'CHECK

MOVE &HFFC1 3 '1 -2
RLOADR 2 3 5 'GET SQUARE
<INCHECK2 'CHECK

MOVE &HFFDE 3 '-2 1
RLOADR 2 3 5 'GET SQUARE
<INCHECK2 'CHECK

MOVE &HFFE2 3 '2 -1
RLOADR 2 3 5 'GET SQUARE
<INCHECK2 'CHECK

MOVE &H1E 3 '-2 1
RLOADR 2 3 5 'GET SQUARE
<INCHECK2 'CHECK

MOVE &H22 3 '2 1
RLOADR 2 3 5 'GET SQUARE
<INCHECK2 'CHECK

MOVE &H3F 3 '-1 2
RLOADR 2 3 5 'GET SQUARE
<INCHECK2 'CHECK

MOVE &H41 3 '1 2
RLOADR 2 3 5 'GET SQUARE
<INCHECK2 'CHECK








'CHECK R4 AGAINST SQUARE
FUNC &B10100 <SQUAREFLIP 'SEND ADDRESS AND COUNTER TO SQUAREFLIP SUBROUTINE

]

>INCHECK2 'CHECK FOR HIDDEN SQUARES
JEI ! 5 <HIDDENCK
JEI ! 5 <HIDDENCK
]

>HIDDENCK
INC 4 'INCREMENT HIDDEN COUNTER
]

>SQUAREFLIP 'FINALLY CHECK AND FLIP A SQUARE
PR &B1111 &B11
'R0=ADDRESS
ADDI !0 1 = % 'R1=COUNTER
SUBI ;LIB_END 0 2 % 'GET LOCATION
ADDI <MINES 2 = % 'GET MINE ADDRESS
LOADR 2 3 'GET MINES ADDRESS
JNR 3 1 <NSATISFIED 'UNSATISFIED CLUE?

>SQUARE_EXIT
'NON-SATISFIED CLUE
STORER 3 0 'RESET CLUE TO NORMAL
EXIT &B1111

>NSATISFIED
R 3 'SOURCE CHARACTER
I <REGULAR_CLUES 'SWAP TABLES
I <TRAINING_CLUES
;@SWAPTABLE
G 3
JUMP <SQUARE_EXIT

>REGULAR_CLUES
$12345678
>TRAINING_CLUES
$









+&H80 'LEAVE SPACE

>MINES 'THIS IS WHERE THE MINES ARE STORED
+&H400
'DATA
>WELCOMETEXT
$Knightsweeper 2020
10
10
$Press  to select mine count,
10
$Press  to start training mode
10
$ to adjust units place and
10
$ to adjust tens place.
10
10
$Touch the screen to dig.
10
10
$Holding any button will place
10
$or remove flags on covered
10
$squares. You can also clear 8
10
$squares around a number by
10
$holding any button down except
10
$L and R.
10
10
$Training mode highlights
10
$satisfied clues, making
10
$inference easier.
0
>DEADTEXT
$Oh no! You died!
10
$Press any button to restart.
0
>VICTORYTEXT
$You swept like a pro!
10
$Press any button to restart.
0
>PLEASEWAIT
$Please wait...
0

