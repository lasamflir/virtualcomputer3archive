'TETRIS
'10x22 BOARD
*&H100
>START
;@34
I <WELCOME
;@BPRINT
I <HS_TEXT
;@BPRINT
;I@LOAD+ <HIGH_SCORE
I 10
;I@EXPAND+
;I@PRINT+
;@NL
I <LEVEL_TEXT
;@BPRINT
STOREIM 0 ;WTN_LOC
I 10
;@INPUTNUM
STOREM .11 <GAME_LEVEL 'SET GAME LEVEL
MULI 10 <GAME_LEVEL % .11 'X10
ADDI 10 .11 = % '+10
STOREM .11 <LINES_REMAIN 'SET LINES UNTIL NEXT LEVEL
STOREIM 0 <GAME_LINES
I 0
;I@EXPAND+
;I@STORE+ <GAME_SCORE 'RESET LINES AND SCORE
STOREIM -1 <HOLD_TYPE 'RESET HOLD


'GAME START
MOVE <SCREEN 13
MOVE ;LIB_END 14
REFR
;@CLS
<GETNEXT
<NEWPIECE
<GETNEXT
<NEWPIECE
<STATS

>GAMELOOP
<GET_BUTTONS
<HOLD
<APPLY_DAS
ANDR <BTN_MASK <DAS_MASK .11 'GET MOVE
<CLEARBLOCK
<MOVE
<GRAVITY
<DRAWBLOCK
'VSYNCI 1
REFR
JNI 1 <GAMEOVER_FLAG <GAMELOOP
JUMP <GAMEOVER

>< ] 'ALL EARLY RETURNS GO HERE
><0 EXIT _0
><01234 EXIT _01234
><012345 EXIT _012345
><012345678 EXIT _012345678

>GET_BUTTONS 'STORE CURRENT BUTTON STATE
COPY <BTN_MASK <BTN_LAST 'SAVE LAST FRAME'S B
BUTTON <BTN_MASK
]

'DETECT AND ACTIVATE HOLD FEATURE
>HOLD
I #L
ORI #R .11 = 'CREATE L+R MASK
ANDR <BTN_MASK .11 = 'GET HOLD MASK
JEI 0 .11 << 'RETURN IF HOLD NOT USED
JEI 1 <HOLD_FLAG << 'RETURN IF HELD ALREADY

<_HOLD

<CLEARBLOCK
JEI -1 <HOLD_TYPE <FIRST_HOLD 'FIRST HOLD?

COPY <HOLD_TYPE .12 'MOVE IT TO S12

'SWAP HOLD AND CURRENT PIECES
SWAP <HOLD_TYPE <PIECE_TYPE

'RESET X AND Y
STOREIM 3 <PIECE_X
STOREIM 0 <PIECE_Y
STOREIM 0 <PIECE_R
STOREIM 1 <HOLD_FLAG 'SET HOLD FLAG
JUMP <HOLD_DRAW

>FIRST_HOLD
PUSHI -1 12
STOREIM 1 <HOLD_FLAG
COPY <PIECE_TYPE <HOLD_TYPE 'PUT IN HOLD
<NEWPIECE

>HOLD_DRAW

JEI -1 .12 <HOLD_SKIP_ERASE 'FIRST DRAW?

DEC 12 'RECOVER S12

'PUSH POSITION OF HOLD BOX
I 18
I 7
R .12
I 0
I 32
<BLOCK_DRAW 'ERASE OLD BLOCK

>HOLD_SKIP_ERASE

'PUSH POSITION OF HOLD BOX
I 18
I 7
R <HOLD_TYPE
I 0
I !
<BLOCK_DRAW 'DRAW NEW BLOCK
]

>APPLY_DAS '...AD
XORR <BTN_MASK <BTN_LAST <DAS_MASK
ANDI &B1110 <DAS_MASK .11 'DAS IS ONLY FOR 

JEI 0 .11 <AD_RSKIP 'SKIP RESET?
MOVE 0 <DAS_TIME

>AD_RSKIP
ANDI &B1110 <BTN_MASK .11
JEI 0 .11 << 'SKIP COUNTING FRAMES?
INC <DAS_TIME

SUBI 16 <DAS_TIME % .11 'CHECK IF DAS IS >=16
JEI 1 .11 << 'SKIP

DIVI 6 <DAS_TIME .11 % 'CHECK TIME%6
JNI 1 .11 << 'SKIP

ANDI &B1110 <BTN_MASK .11 'GET DAS BUTTONS
ORR .11 <DAS_MASK = 'OR INTO DAS MASK
]

'GET ALL INFO FOR DRAWING PLAYER BLOCK
>PREP_BLOCK
R <PIECE_X
R <PIECE_Y
R <PIECE_TYPE
R <PIECE_R
]

>DRAWBLOCK
<PREP_BLOCK
I !
<BLOCK_DRAW
]

>CLEARBLOCK
<PREP_BLOCK
I 32
<BLOCK_DRAW
]

'APPLY PIECE MOVEMENT
>MOVE '...M
PR _012345 _0
JEI 0 0 <<012345

'WILL NEED CHANGING WHEN DAS IMPLEMENTED
'ANDR <BTN_MASK <DAS_MASK 0 'GET PRESSED BTN

'CREATE WORKING COPIES OF VARIABLES
COPY <PIECE_X 1
COPY <PIECE_Y 2
COPY <PIECE_TYPE 3
COPY <PIECE_R 4
MOVE 0 5 'DOWN FLAG

R 0
ANDI &B1111 0 = 'FILTER OUT ROTATION

JNI #UP 0 <M_UPSKIP
INC 11 'DROP BUTTONS
<LOW_POINT 'CALCULATE HARD DROP LOCATION
G 2
MOVE 1 5 'SET DOWN FLAG
COPY 2 <PIECE_Y
JUMP <M_LOCKDOWN
<_CLICK

>M_UPSKIP
JNI #LEFT 0 <M_LEFTSKIP
DEC 1 'X--
<_CLICK

>M_LEFTSKIP
JNI #RIGHT 0 <M_RIGHTSKIP
INC 1 'X++
<_CLICK

>M_RIGHTSKIP
JNI #DOWN 0 <M_DOWNSKIP
INC 2 'Y++
MOVE 1 5 'SET DOWN FLAG

>M_DOWNSKIP
ANDI &B110000 .11 0 'FILTER OUT DIRECTIONS
JNI #A 0 <M_CLOCKSKIP
DIVI 4 }4 4 %
<_CLAP

>M_CLOCKSKIP
JNI #B 0 <M_CCLOCKSKIP
DIVI 4 {4 4 %
<_CLAP

>M_CCLOCKSKIP
FUNC _1234 <COLLISION 'CHECK COLLISION
JEI 1 .11 <M_LOCKDOWN 'EARLY RETURN

'COPY BACK OUT
COPY 1 <PIECE_X
COPY 2 <PIECE_Y
COPY 3 <PIECE_TYPE
COPY 4 <PIECE_R
EXIT _012345


>M_LOCKDOWN
JEI 0 5 <<012345 'DOWN FLAG NOT SET?

'COLLISION HEADING DOWN
<LOCK
<NEWPIECE
<SCORE
EXIT _012345

>GRAVITY '...G
LOADM <GAME_LEVEL 0 'GET LEVEL
JGI+ 25 0 <G_LEVELMAXSKIP 'MAX?
MOVE 24 0 'CLAMP LEVEL TO MAX

>G_LEVELMAXSKIP
ILOADR <LEVEL_TIME 0 = 'GET LEVEL TIMING
INC <GRAVITY_TIME 'ADVANCE GRAVITY TIMER
JGR+ 0 <GRAVITY_TIME << 'SKIP GRAVITY

STOREIM 0 <GRAVITY_TIME 'RESET TIMER
I #DOWN 'SEND A DOWN PRESS
<MOVE
]

>LOCK
'"LOCK" CURRENT PIECE TO BOARD
<PREP_BLOCK
I !
<BLOCK_DRAW
<_LOWTOM
STOREIM 0 <HOLD_FLAG 'RESET HOLD FLAG
]

>NEWPIECE '...NP

'RESET PIECE VARIABLES
STOREIM 3 <PIECE_X
STOREIM 0 <PIECE_Y
STOREIM 0 <PIECE_R
COPY <NEXT_TYPE <PIECE_TYPE 'SET NEXT TO CURRENT PIECE
<GETNEXT 'GET NEXT PIECE AFTER THAT
]

>GETNEXT '...GN
PE _0
'PUSH POSITION OF NEXT BOX
I 12
I 7
R <NEXT_TYPE
I 0
I 32
<BLOCK_DRAW 'ERASE OLD BLOCK

'DECIDE NEXT PIECE USING BAG
I <BAG_MASK
I 18
I 0
;@SFAFIND ;@SWAP ;@X 'DROP POSITION, JUST KEEP SUCCESS

JNI 0 .11 <GN_BAGRESETSKIP 'IS BAG EMPTY?

'RESET THE BAG
I <BAG_MASK
I 18
I 1
;@FILL 'FILL BAG WITH ONES

>GN_BAGRESETSKIP
RND 0 'GET RANDOM
ANDI &B11111 0 = 'RESTRICT
JLI+ 17 0 <GN_BAGRESETSKIP 'RESTRICT TO 18

ILOADR <BAG_MASK 0 .11 'GET BAG MASK TRUTH
JEI 0 .11 <GN_BAGRESETSKIP 'INVALID?

ISTORER % 0 <BAG_MASK 'ZERO BAG MASK

STOREM 0 <NEXT_TYPE 'NEW NEXT PIECE SET

'PUSH POSITION OF NEXT BOX
I 12
I 7
R <NEXT_TYPE
I 0
I !
<BLOCK_DRAW 'DRAW NEW BLOCK

<PREP_BLOCK
<COLLISION
JEI 1 .11 <GAME-OVER 'GAME OVER?

EXIT _0

>GAME-OVER
STOREIM 1 <GAMEOVER_FLAG
EXIT _0

'GENERALISED BLOCK DRAW SUBROUTINE
'X, Y, PIECE, ROTATION, CHAR
'->
>BLOCK_DRAW '...BD
PE _012345678
REC _45678 'MOVE VARIABLES UP INTO R4-8

'R4=PIECE X
'R5=PIECE Y
'R6=PIECE
'R7=ROTATION
'R8=CHARACTER

MOVE 0 0 'R0=CELL OFFSET
MOVE 0 1 'CELL INDEX

'CREATE SCREEN OFFSET
MULI 32 5 % .11 'CREATE BOARD OFFSET
ADDR 4 .11 = %
ADDI <GAME_TOP .11 2 % 'R2=SCREEN OFFSET

'CREATE PIECE OFFSET
ILOADR <PIECES 6 .11 'PIECE INDEX
MULI 5 7 % .11 'ROTATION OFFSET
ADDR .11 = 3 % 'R3=FINAL PIECE OFFSETS INDEX

>BD_LOOP
JEI 5 1 <<012345678 'EXIT WHEN DONE
RLOADR 3 )1 0 'LOAD A CELL
ADDR 2 0 = % 'ADD SCREEN OFFSET
STORER 8 0
JUMP <BD_LOOP

'COLLISION SUBROUTINE
'X, Y, PIECE, ROTATION
'->WHETHER COLLISION OCCURRED
>COLLISION '...C
PE _01234567
REC _4567 'MOVE VARIABLES UP INTO R4-8

'R4=PIECE X
'R5=PIECE Y
'R6=PIECE
'R7=ROTATION

MOVE 0 0 'R0=CELL OFFSET
MOVE 0 1 'CELL INDEX

'CREATE SCREEN OFFSET
MULI 32 5 % .11 'CREATE BOARD OFFSET
ADDR 4 .11 = %
ADDI <GAME_TOP .11 2 % 'R2=SCREEN OFFSET

'CREATE PIECE OFFSET
ILOADR <PIECES 6 .11 'PIECE INDEX
MULI 5 7 % .11 'ROTATION OFFSET
ADDR .11 = 3 % 'R3=FINAL PIECE OFFSETS INDEX

>C_LOOP
JEI 5 1 <C_NO 'EXIT WHEN DONE
RLOADR 3 )1 0 'LOAD A CELL
ADDR 2 0 = % 'ADD SCREEN OFFSET
JNI 32 ,0 <C_YES 'COLLISION
JUMP <C_LOOP

>C_NO
I 0
EXIT _01234567

>C_YES
I 1
EXIT _01234567

'CALCULATE HOW MANY LINES HAVE BEEN CLEARED
'AND THE SCORE TO ADD, THEN UPDATE GAME
'VARIABLES

>SCORE '...S
PE _01234
MOVE 0 0 'X COUNTER
MOVE 0 1 'Y COUNTER
MOVE 0 2 'LINE COUNTER

>S_YLOOP
JEI 22 1 <S_YEXIT

>S_XLOOP
JEI 10 0 <S_LINE 'LINE SCORED
'CREATE SCREEN COORDINATES
MULI 32 1 % 3
ADDR 0 3 = %
ADDI <GAME_TOP 3 = %

JEI 32 ,3 <S_XEXIT 'NOT A LINE
INC 0
JUMP <S_XLOOP

>S_XEXIT
MOVE 0 0 'RESET X
INC 1 'INC Y
JUMP <S_YLOOP

>S_LINE
'CREATE SCREEN COORDINATES OF LINE
MULI 32 1 % 3
ADDI <GAME_TOP 3 = %

'PUT ON STACK TO ERASE
MOVE <CLEAR_ANIM 4 'ANIMATION FRAME

>S_ANIMLOOP
R 3
I 10
R ,4 'SEND ANIMATION FRAME
INC 4
;@FILL
VSYNCI 1
REFR
JNI 0 ,4 <S_ANIMLOOP

<SCORE_GRAVITY 'APPLY GRAVITY TO SCORE
REFR
INC 2 'INCREMENT LINE COUNTER
JUMP <S_XEXIT

>S_YEXIT
JEI 0 2 <S_SOUNDSKIP 'SKIP SOUND?
JEI 5 2 <S_PENTRIS 'PENTRIS?
<_CLEAR
JUMP <S_SOUNDSKIP

>S_PENTRIS
<_PENTRIS

>S_SOUNDSKIP
ILOADR <BASE_SCORES 2 .11 'GET BASE SCORE
;I@EXPAND+ 'EXPAND IT
LOADM <GAME_LEVEL .11
INC .11 'ADD 1 TO LEVEL TO GET MULTIPLIER
;I@EXPAND+
;I@MUL 'GET SCORE TO ADD
;I@DROP 'DROP OVERFLOW
;I@LOAD+ <GAME_SCORE 'GET GAME SCORE
;I@ADD 'ADD GAME SCORE AND LINES SCORE
;I@DROP
;I@STORE+ <GAME_SCORE 'UPDATE GAME SCORE

ADDR 2 <GAME_LINES = % 'UPDATE GAME LINES
SUBR 2 <LINES_REMAIN = .11 'SUB LINES REMAINING
JEI 1 .11 <LEVELUP 'LEVEL UP?

>S_L_U
<STATS 'UPDATE THE SCREEN
EXIT _01234

>LEVELUP
ADDI 10 <LINES_REMAIN = % 'REPLENISH REMAINING LINES
INC <GAME_LEVEL 'LEVEL UP!
<_LEVELUP
JUMP <S_L_U


>SCORE_GRAVITY '...SG
PE _0123
'R1=Y OF ERASED LINE

>SG_LOOP
'CREATE SCREEN COORDINATES OF LINE
MULI 32 1 % 3
ADDI <GAME_TOP 3 = %

SUBI 32 3 .11 % 'PUSH LINE ABOVE
I 10
R 3 'PUSH LINE
;@FCP 'COPY
JNI 0 {1 <SG_LOOP 'REPEAT UNTIL TOP

MULI 32 1 % 3
ADDI <GAME_TOP 3 = %

R 3
I 10
I 32
;@FILL 'ERASE TOP LINE IF ONE EXISTS
EXIT _0123

'PRINT GAME STATS
>STATS
PE _01
;I@LOAD+ <GAME_SCORE
I 10 'DECIMAL!
;I@EXPAND+
;I@GD 'GET DIGITS
REC _01 'R0=LOC R1=LEN
DEC 1 'REMOVE NUMBER TERMINATOR
S _01 'SEND LOCATION AND LENGTH
I <SCORE_END 'GET SCORE END LOCATION
SUBR 1 .11 = % 'SUBTRACT LENGTH
;@FCP 'PRINT SCORE

R <GAME_LEVEL
I 10
;@WORDTONUM
;@NO0
REC _01 'R0=LOC 'R1=LEN
S _01 'SEND
I <LEVEL_END 'GET LE LOCATION
SUBR 1 .11 = % 'SUB LENGTH
;@FCP 'PRINT LEVEL

R <GAME_LINES
I 10
;@WORDTONUM
;@NO0
REC _01 'R0=LOC 'R1=LEN
S _01 'SEND
I <LINES_END 'GET L LOCATION
SUBR 1 .11 = % 'SUB LENGTH
;@FCP 'PRINT LEVEL

EXIT _01

'CALCULATES HARD DROP Y VALUE
>LOW_POINT '...LP
PE _01234
COPY <PIECE_X 0
COPY <PIECE_Y 1
COPY <PIECE_TYPE 2
COPY <PIECE_R 3

>LP_LOOP
INC 1 'Y++
FUNC _0123 <COLLISION 'CHECK FOR COLLISION
JEI 0 .11 <LP_LOOP 'REPEAT UNTIL COLLISION

DEC 1 'DEC Y
SRE _1 _01234 'RETURN Y

>GAMEOVER '...GO
STOREIM 0 <GAMEOVER_FLAG 'RESET FLAG
I <GAMEOVER_TEXT
;@BPRINT
REFR

>GO_LOOP
;@RBTN
JNI #Y .11 <GO_LOOP

<RESET
;@CLS

'CHECK FOR HIGH SCORE
;I@LOAD+ <GAME_SCORE
;I@LOAD+ <HIGH_SCORE
;I@<
JEI 1 ,11 <NO_HIGH_SCORE

'NEW HIGH SCORE
;I@DROP
;I@LOAD+ <GAME_SCORE
;I@STORE+ <HIGH_SCORE
JUMP <RESET_VARIABLES

>NO_HIGH_SCORE
;I@DROP

>RESET_VARIABLES

JUMP <START

>RESET
'ERASE ALL , AND NUMBERS FROM THE SCREEN
MOVE <SCREEN 0 'R0=COUNTER

>RESET_LOOP
LOADR }0 1
JEI ! 1 <R_ERASE
JEI ! 1 <R_ERASE
JEI !0 1 <R_ERASE
JEI !1 1 <R_ERASE
JEI !2 1 <R_ERASE
JEI !3 1 <R_ERASE
JEI !4 1 <R_ERASE
JEI !5 1 <R_ERASE
JEI !6 1 <R_ERASE
JEI !7 1 <R_ERASE
JEI !8 1 <R_ERASE
JEI !9 1 <R_ERASE

>RESET_RESUME
JGI+ <S__END 0 <RESET_LOOP
]

>R_ERASE
STOREIR 32 0
REFR
JUMP <RESET_RESUME

'SOUND
>_CLICK
I 0
I 9
BEEP .11 =
]

>_CLAP
I 0
I 28
BEEP .11 =
]

>_LOWTOM
I 0
I 24
BEEP .11 =
]

>_PENTRIS
I 0
I 32
BEEP .11 =
]

>_CLEAR
I 0
I 12
BEEP .11 =
]

>_HOLD
I 0
I 56
BEEP .11 =
]

>_LEVELUP
I 0
I 42
BEEP .11 =
]


'VARIABLES
>HIGH_SCORE 0 0 0 0 'IT'S A 64-INT!
>GAME_SCORE 0 0 0 0
>GAME_LINES 0
>GAME_LEVEL ` 0
>LINES_REMAIN @ 0 'LINES LEFT THIS LEVEL
>BTN_MASK 0 'CURRENT BUTTON STATE
>BTN_LAST 0 'LAST FRAME'S STATE
>DAS_MASK 0 'TRACKS CHANGES IN INPUT
>DAS_TIME 0 'TRACKS TIME SINCE LAST CHANGE
>PIECE_TYPE 0
>NEXT_TYPE 0
>HOLD_TYPE -1
>HOLD_FLAG 0 'SET TO DISABLE HOLD FEATURE
>PIECE_X 0
>PIECE_Y 0
>PIECE_R 0
>GRAVITY_TIME 0 'TIME SINCE GRAVITY APPLIED
>BAG_MASK +18 'MASK FOR 18-BAG RANDOMISER
>GAMEOVER_FLAG 0 'IS THE GAME OVER?

'DATA
'TIME BETWEEN GRAVITY PUSHING DOWN IN FRAMES
>LEVEL_TIME
48 '0
45
43
40
38
35
33
30
28
25
23 '10
20
18
15
13
10
9
8
7
6
5 '20
4
3
2
1 '24

>BASE_SCORES 0 1 6 18 40 75 'USED TO SCORE MOVES

'PIECES
'LJOISZT
>PIECES
<I
<F1
<F2
<L1
<L2
<O1
<O2
<N1
<N2
<T
<U
<V
<W
<X
<Y1
<Y2
<Z1
<Z2

'OFFSETS FROM X AND Y ARE STORED
>I
64 65 66 67 68
2 34 66 98 130
64 65 66 67 68
2 34 66 98 130

>F1
1 32 33 34 66
1 33 34 64 65 
0 32 33 34 65
1 2 32 33 65

>F2
1 32 33 34 64
0 1 33 34 65 
2 32 33 34 65
1 32 33 65 66

>L1
32 64 65 66 67
1 2 33 65 97
32 33 34 35 67
2 34 66 97 98

>L2
35 64 65 66 67
1 33 65 97 98
32 33 34 35 64
1 2 34 66 98

>O1
1 2 32 33 34
1 33 34 65 66
32 33 34 64 65
0 1 32 33 65

>O2
32 33 64 65 66
0 1 32 33 64
0 1 2 33 34
2 33 34 65 66

>N1
32 33 65 66 67
2 33 34 65 97
32 33 34 66 67
2 34 65 66 97

>N2
34 35 64 65 66
1 33 65 66 98
33 34 35 64 65
1 33 34 66 98

>T
1 33 64 65 66
0 32 33 34 64
0 1 2 33 65
2 32 33 34 66

>U
0 2 32 33 34
1 2 33 65 66
32 33 34 64 66
0 1 33 64 65

>V
2 34 64 65 66
0 32 64 65 66
0 1 2 32 64
0 1 2 34 66

>W
2 33 34 64 65
0 32 33 65 66
1 2 32 33 64
0 1 33 34 66

>X
1 32 33 34 65
1 32 33 34 65
1 32 33 34 65
1 32 33 34 65

>Y1
34 64 65 66 67
1 33 65 66 97
32 33 34 35 65
2 33 34 66 98

>Y2
33 64 65 66 67
1 33 34 65 97
32 33 34 35 66
2 34 65 66 98

>Z1
1 2 33 64 65
0 32 33 34 66
1 2 33 64 65
0 32 33 34 66

>Z2
0 1 33 65 66
2 32 33 34 64
0 1 33 65 66
2 32 33 34 64

>TEXTURES
'LJOISZT
$
$

>CLEAR_ANIM
$ 
'$ 
'$ 
0

'STRINGS
>WELCOME
$
10
$
10
$        
10
$  
10
$         
10
$    
10
$
10 0

>HS_TEXT
$High score:
0

>LEVEL_TEXT
$Level:
0

>GAMEOVER_TEXT
$Too bad! Press  to restart
0

>SCREEN
$
$
>GAME_TOP
$          POINTSLINESLEVEL
$          
$                
>SCORE_END
$     
>LINES_END
$     
>LEVEL_END
$
$          
$                  
$          NEXT HOLD       
$                 
$                           
$                           
$                           
$                 
$                              
$                              
$                              
$                              
$                              
$          
$          
$                  
$            
$                   
$          
>GAME_END
$    
$
>S__END

