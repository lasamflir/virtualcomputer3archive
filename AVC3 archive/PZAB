'PZAB INTERPRETER

*&H100
>START
;@34
;@QPRINT 'PRINT LOADPROMPT
$PZAB Program:
0

>PROMPT
I <PROGRAM 'LOAD INTO PROGRAM MEMORY
;@LOADTEXTNAME
REC _01 'GET RETURN VALUES
JEI 0 1 <PROMPT 'LOAD FAIL?
;@CLS
MOVE <PROGRAM 13
MOVE <LOOP_TABLE 14



>BUILD_LOOPS 'BUILD UP THE LOOP TABLE
MOVE <PROGRAM 0 'R0=PC

'MATCH ? TO ~ AND 1-9 TO 0

LOADR 0 1 'GET PROGRAM CHARACTER
>BL_LOOP
JEI 0 1 <BL_EXIT 'END?
JEI !? 1 <BL_PUSH '??
JEI !~ 1 <BL_POP '??
JEI !0 1 <BL_POP '0?
SUBI !1 1 = % 'SUBTRACT !1
JGI+ 9 1 <BL_PUSH 'NUMBERED LOOP

>BL_LOWER
LOADR }0 1 'ADVANCE PC AND LOAD MORE CHARACTERS
JUMP <BL_LOOP

>BL_PUSH
R 0 'PUSH CURRENT PC
JUMP <BL_LOWER

>BL_POP
G 2 'POP LOCATION
'UPDATE LOOP TABLE
ISTORER 2 0 &H1000
ISTORER 0 2 &H1000
REFR
JUMP <BL_LOWER

>BL_EXIT
MOVE <MEMORY 14

MOVE <PROGRAM 5 'R5=PROGRAM COUNTER
MOVE <MEMORY 0 'R0=P0
MOVE 0 1 'R1=P1
MOVE 0 2 'R2=Z
MOVE 0 3 'R3=A
MOVE 0 4 'R4=B

LOADR 5 6 'R6=CURRENT INSTRUCTION
MOVE 0 10 'R10=NEWLINE FLAG (SET TO LAST IO INSTRUCTION)

;@13 'SET UP DISPLAY
MOVE <PROGRAM 14

>MAIN 'MAIN EXECUTION LOOP
JEI 0 6 <HALT
JEI !+ 6 <+
JEI !- 6 <-
JEI !< 6 <<
JEI !> 6 <>
JEI !A 6 <A
JEI !B 6 <B
JEI !a 6 <a
JEI !b 6 <b
JEI !Z 6 <Z
JEI !! 6 <!
JEI !& 6 <&
JEI !| 6 <|
JEI !_ 6 <_
JEI !. 6 <.
JEI !, 6 <,
JEI !: 6 <:
JEI !; 6 <;
JEI !? 6 <?
JEI !1 6 <1
JEI !0 6 <0
SUBI !2 6 = %
JGI+ 8 6 <LOOP#

>ADVANCE
LOADR }5 6 'PC++ AND FETCH
JUMP <MAIN

>HALT HALT

>+
ANDI &HFF }0 0 'INCREMENT AND RESTRICT P0
ORI <MEMORY 0 =
JUMP <ADVANCE

>-
ANDI &HFF {0 0 'DECREMENT AND RESTRICT P0
ORI <MEMORY 0 =
JUMP <ADVANCE

><
ANDI &H7 }1 1 'INCREMENT AND RESTRICT P1
JUMP <ADVANCE

>>
ANDI &H7 {1 1 'DECREMENT AND RESTRICT P1
JUMP <ADVANCE

>A
<GETBIT 'READ MEMORY
G 3
JUMP <ADVANCE

>B
<GETBIT 'READ MEMORY
G 4
JUMP <ADVANCE

>a
COPY 2 3
JUMP <ADVANCE

>b
COPY 2 4
JUMP <ADVANCE

>Z
FUNC _2 <SETBIT
JUMP <ADVANCE

>!
XORI 1 2 = 'INVERT Z
JUMP <ADVANCE

>&
ANDR 3 4 2
JUMP <ADVANCE

>|
ORR 3 4 2
JUMP <ADVANCE

>_
XORR 3 4 2
JUMP <ADVANCE

>.
JEI 0 10 <.GET 'SKIP IF FIRST
;@NL

>.GET
I !# ;@PC 'PRINT #
I 10 ;@INPUTNUM 'GET NUMBER
ANDI &HFF .11 = 'RESTRICT INPUT
R ,11 ;@NO0DEC 'REPRINT IT
REFR
G ,0 'SET MEMORY
MOVE !. 10 'SET NL FLAG
STOREIM 0 ;WTN_LOC 'ERASE NUM
JUMP <ADVANCE

>,
JEI 0 10 <,GET 'SKIP IF FIRST
JEI !, 10 <,GET 'SKIP IF ADJACENT
;@NL

>,GET
I !î‹² ;@PC 'SHOW BUSY DIAMOND
REFR
;@13
;@GETKEY 'AWAIT A KEYPRESS
MOVE <PROGRAM 14
I 8 ;@PC 'DELETE DIAMOND
ANDI &HFF .11 = 'RESTRICT INPUT
R ,11 ;@PC 'REPRINT CHARACTER
REFR
G ,0 'SET MEMORY
MOVE !, 10 'SET NL FLAG
JUMP <ADVANCE

>:
JEI 0 10 <:DO 'SKIP IF FIRST
;@NL

>:DO
R ,0 ;@NO0DEC
MOVE !: 10 'SET NL FLAG
REFR
JUMP <ADVANCE

>;
JEI 0 10 <;DO 'SKIP IF FIRST
JEI !; 10 <;DO 'SKIP IF ADJACENT
;@NL

>;DO
R ,0 ;@PC
MOVE !; 10 'SET NL FLAG
REFR
JUMP <ADVANCE

>?
JEI 0 2 <ADVANCE 'NOP IF Z IS ZERO

>REP
ILOADR &H1000 5 = 'GET NEW PC
JUMP <ADVANCE

>0
G (6 'GET LOOP COUNTER AND DECREMENT IT
JEI 0 6 <ADVANCE 'NOP IF IT'S ZERO
JEI -2 6 <-1 'INFINITE LOOP?
R 6 'PUSH BACK LOOP COUNTER
JUMP <REP

>-1
I -1 'PUSH BACK -1
JUMP <REP

>1
I -1 'SENTINEL VALUE FOR INFINITE LOOP
JUMP <ADVANCE

>LOOP#
ADDI 2 6 .11 % 'ADJUST FOR SUBBING !2
JUMP <ADVANCE

>GETBIT
'USE R0 AND R1 TO READ FROM MEMORY
'MOVE 1 7 'BIT MASK
'LEFTR 1 7 = % 'SHIFT MASK
DECODE 1 7
ANDR ,0 7 = 'GET BIT
TRUE 7 .11 'RETURN BIT
]

>SETBIT
'GET IN BIT
TRUE .11 =
TWO .11 = '0=0 1=&HFFFF

'MOVE 1 7 'BIT MASK
'LEFTR 1 7 = % 'SHIFT MASK

DECODE 1 |7
ANDR 7 ,0 = 'CLEAR BIT
ANDR |7 .11 = 'BIT TO OR INTO MEMORY
ORR .11 ,0 = 'SET BIT
]

>PROGRAM 'PROGRAM MEMORY STARTS HERE
+&H1000
>LOOP_TABLE

*&H8000
>MEMORY 'MEMORY MUST BE PAGE-ALIGNED!!

