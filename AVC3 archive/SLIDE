*&H100
>START
'SLIDE PUZZLE GAME
MOVE ;LIB_END 14
MOVE <GAMESCREEN 13
REFR
STOREIM <GAMESCREEN ;_ORIGIN
STOREIM 0 <MOVECOUNT

MOVE 15 0 'R0=GAP LOCATION
<INITIALISE 'SET UP THE DISPLAY
REFR

<RANDOMISE
<INITIALISE 'SET UP THE DISPLAY
REFR
I 0 'PRINT ZERO SCORE
;@DEC
;@NL

>GAMELOOP
REFR
;@RBTN 'GET BUTTON
<VALIDMOVE 'CHECK IF CURRENT MOVE IS VALID
<COUNTMOVE 'IF MOVE IS VALID, COUNT IT
<APPLYMOVE 'APPLY MOVE TO GAME
<DISPLAY 'SHOW PUZZLE ON SCREEN
<SOLVECHECK 'CHECK IF THE PUZZLE IS SOLVED
'<INITIALISE
JNI 1 5 <GAMELOOP 'KEEP GOING UNTIL SOLVED
I <SOLVEDMESSAGE
;@BPRINT 'PRINT SOLVED MESSAGE
STOREIM 16 <LASTTILE 'ENABLE 16 TILE
I 15 'DRAW 16 TILE
<DRAWTILE
STOREIM 0 <LASTTILE 'DISABLE 16 TILE
REFR 'REFRESH
;@RBTN 'WAIT FOR ANY BUTTON PRESS
JUMP <START





>VALIDMOVE
ADDI <MOVETABLE 0 2 % 'CREATE POINTER TO MOVE TABLE
LOADR 2 = 'LOAD MOVE TABLE ENTRY
'XORI &HF 2 = 'INVERT IT
G 1 'GET MOVE
ANDR 2 1 = 'PERFORM BIT MASKING
R 1 'PASS MOVE
]

>COUNTMOVE
PE &B11
G 0 'GET MOVE
JEI 0 0 <NONMOVE

LOADM <MOVECOUNT 1 'GET MOVE COUNT
INC 1 'INCREMENT IT
R 1 'PASS SCORE
I 8
I 6
;@CHRREP 'DELETE PREVIOUS SCORE
;@DEC ;@NL 'PRINT CURRENT SCORE WITH NEWLINE
STOREM 1 <MOVECOUNT 'STORE MOVE COUNT

>NONMOVE
R 0
RE &B11
]

>APPLYMOVE
G 1 'GET MOVE
ADDI <DELTA 1 = % 'CREATE POINTER TO DELTA TABLE
LOADR 1 = 'LOAD FROM TABLE
ADDI <PUZZLESTATE 0 2 % 'CREATE POINTER TO PUZZLE
ADDR 1 2 3 % 'CREATE POINTER TO MOVED PIECE
LOADR 3 4 'PERFORM SWAP
LOADR 2 5
STORER 4 2
STORER 5 3
COPY 0 6 'MAKE A COPY FOR DISPLAY ROUTINE
ADDR 1 0 = % 'ADJUST GAP LOCATION
]

>DISPLAY_DEBUG
;@NL

MOVE <PUZZLESTATE 8 'POINTER
MOVE 4 6 'Y COUNTER
>YLOOP

MOVE 4 7 'X COUNTER
>XLOOP

LOADR 8 9 'GET PIECE
R 9 'PRINT IT
;@HEX
DEC 7 'DEC X COUNTER
INC 8 'INC POINTER
JNI 0 7 <XLOOP 'REPEAT?

;@NL 'PRINT NEWLINE
DEC 6
JNI 0 6 <YLOOP
]

>DISPLAY
R 0 'NEW GAP LOCATION
R 6 'OLD GAP LOCATION
<DRAWTILE 'DRAW SWAPPED TILES
<DRAWTILE
]

>RANDOMISE
MOVE 500 7 'MOVE COUNTER

>RLOOP
JEI 0 7 <REXIT 'END?
MOVE 1 8 'GENERATE BIT
RND 9 'GET RANDOM NUMBER
ANDI 3 9 = 'MASK DOWN TO 0-3
JER 9 10 <RLOOP 'PREVENT CONFLICTING MOVES
COPY 9 10 'MAKE A COPY
ADDI <FORBIDDEN_MOVE 10 = % 'OFFSET
LOADR 10 = 'LOOK UP FORBIDDEN MOVE
LEFTR 9 8 = % 'MOVE GENERATED
R 8 'PASS MOVE
<VALIDMOVE 'VALIDATE IT
G 8
JEI 0 8 <RLOOP 'INVALID MOVE?
R 8
<APPLYMOVE 'DO MOVE
<DISPLAY 'UPDATE DISPLAY
REFR
DEC 7
JUMP <RLOOP

>REXIT
]

>INITIALISE
PSR 0
MOVE 0 0 'R0=TILE POINTER

>ILOOP 'INITIALISING LOOP
R 0
<DRAWTILE 'DRAW TILE
INC 0
JNI 16 0 <ILOOP 'END REACHED?
RSR 0
]

>DRAWTILE
PE &B111
G 0 'R0=TILE INDEX
DIVI 4 0 1 2
'R1=X-INDEX
'R2=Y-INDEX
MULI 8 1 = = 'CREATE X COMPONENT
MULI 192 2 = = 'CREATE Y COMPONENT
ADDR 2 1 = % 'CREATE LOCATION
ADDI <PUZZLESTATE 0 = % 'OFFSET FOR GRID
LOADR 0 = 'GET PUZZLE PIECE
COPY 0 2 'MAKE A COPY
ADDI <SPRITES 0 = % 'OFFSET FOR LOOKUP
LOADR 0 = 'GET SPRITE ADDRESS
R 1 'LOCATION
R 0 'ADDRESS
R 2 'FLAG
;@SPRITE
RE &B111
]

>SOLVECHECK
PE &B111
MOVE <PUZZLESTATE 0 'R0=POINTER
'R1=SCRATCH
MOVE 1 2 'R2=COUNTER

>CHECKLOOP
LOADR 0 1 'GET TILE
JNR 1 2 <UNSOLVED 'UNSOLVED?
INC 0 'POINTER++
INC 2 'COUNTER++
JNI 16 2 <CHECKLOOP 'CHECK ALL TILES
MOVE 1 5 'SET SOLVED FLAG

>UNSOLVED 'DO NOTHING
RE &B111
]

>MOVETABLE 'LOOKUP TABLE OF VALID MOVES
' BITS: RLDU
&B1010 &B1110 &B1110 &B0110
&B1011 &B1111 &B1111 &B0111
&B1011 &B1111 &B1111 &B0111
&B1001 &B1101 &B1101 &B0101

>PUZZLESTATE
 1  2  3  4
 5  6  7  8
 9 10 11 12
13 14 15 >LASTTILE 0

>DELTA
0 -4 4 0 -1 0 0 0 1 0 0 0 0 0 0 0

>SPRITES
<0S <1S <2S <3S <4S <5S <6S <7S <8S <9S <10S <11S <12S <13S <14S <15S <16S

>FORBIDDEN_MOVE
1 0 3 2

>1S
8 6
$
$     
$     
$     
$     
$
>2S
8 6
$
$   
$   
$     
$   
$
>3S
8 6
$
$   
$    
$     
$   
$
>4S
8 6
$
$     
$    
$   
$     
$
>5S
8 6
$
$   
$   
$     
$   
$
>6S
8 6
$
$   
$   
$    
$   
$
>7S
8 6
$
$   
$     
$     
$     
$
>8S
8 6
$
$   
$   
$    
$   
$
>9S
8 6
$
$   
$    
$   
$   
$
>10S
8 6
$
$  
$   
$   
$  
$
>11S
8 6
$
$    
$    
$    
$    
$
>12S
8 6
$
$  
$  
$    
$  
$
>13S
8 6
$
$  
$   
$    
$  
$
>14S
8 6
$
$    
$   
$  
$    
$
>15S
8 6
$
$  
$  
$    
$  
$
>16S
8 6
$
$  
$  
$   
$  
$
>0S
8 6
+48
>MOVECOUNT 0
>SOLVEDMESSAGE
$Solved! Press any button.
10 0
>GAMESCREEN

