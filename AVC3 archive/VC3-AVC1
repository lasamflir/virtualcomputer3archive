*&H100
'VIRTUAL COMPUTER 3 INTERPRETER
'COMPILES QLOADING PROGRAMS
'NEEDS TO INTERPRET ALL NUMBER FORMATS
'STOPS ON INCOMPATIBILITY
JUMP <START
*&H9000
>START
CLIPI 0 0 'CHECK CLIPBOARD
JNI 0 0 <TSTART 'IS IT EMPTY?
HALT 'HALT IF EMPTY

>TSTART
STOREIM 0 &H100 'ERASE STARTING JUMP
STOREIM 0 &H101 'ERASE STARTING JUMP
MOVE ;WTN_LOC 14 'PLACE BUFFER ON DISPLAY
MOVE 0 0 'R0=MEMORY CURSOR
MOVE 0 1 'R1=CLIPBOARD CURSOR
COPY 0 13 'PLACE VC4 MEMORY ON SCREEN
'R2=NUMBUFFER CURSOR
'R3=CLP CHARACTER
'R4=CLP WORD
'R5=CHECK REGISTER
'R6=SCREEN DRIFT
REFR

>LOADLOOP
SUBR 13 0 6 % 'GET SCREEN DRIFT
JGI+ &H300 6 <DSKIP 'SKIP DRIFT CORRECTION
ADDI &H300 13 = % 'CORRECT SCREEN DRIFT
JUMP <LOADLOOP

>DSKIP
CLIPR 1 3 'GET CLIPBOARD CHR
JEI !! 3 <VCSTART 'START?
JEI 0 3 <VCSTART 'START?
JEI !+ 3 <RELREL 'RELATIVE RELOCATION?
JEI !* 3 <ABSREL 'ABSOLUTE RELOCATION?
JEI !# 3 <DATA 'NUMBER?
JEI !: 3 <DATA 'INSTRUCTION?
INC 1
JUMP <LOADLOOP

>RELREL
REFR
<LINELOAD
ADDR 4 0 = % 'UPDATE MEMORY CURSOR
COPY 0 13 'PLACE ON SCREEN
JUMP <LOADLOOP

>ABSREL
REFR
<LINELOAD
COPY 4 0 'UPDATE MEMORY CURSOR
COPY 0 13 'PLACE ON SCREEN
JUMP <LOADLOOP

>DATA
<LINELOAD
LOADR 0 5 'CHECK MEMORY CELL
JNI 0 5 <ERROR 'STOP IF OVERWRITING CODE
STORER 4 0 'WRITE MEMORY CELL
REFR
INC 0 'MOVE TO NEXT CELL
JUMP <LOADLOOP

'LOAD A NUMBER IN UNTIL THE NEWLINE TO THE BUFFER, AND RETURN ITS VALUE
>LINELOAD
MOVE ;WTN_LOC 2 'NUMBUFFER CURSOR
INC 1 'MOVE ONTO START OF NUMBER
I ;WTN_LOC
;@BLOCK 'ERASE THE NUMBUFFER
;@ERASE

>LLLOOP
CLIPR 1 3 'GET CLIPBOARD CHR
JEI 10 3 <LINEEND 'END OF LINE?
JEI 0 3 <LINEEND 'END OF LINE?
STORER 3 2 'WRITE TO NUMBUFFER
INC 1 'INCREMENT CLIPBOARD COUNTER
INC 2 'INCREMENT BUFFER COUNTER
JUMP <LLLOOP

>LINEEND
I ;WTN_LOC
;@BLOCK 'FIND NUMBER
;@SBNUMTOWORD 'GET WORD FROM NUMBER
INC 1 'INCREMENT CLIPBOARD COUNTER
G 4 'PLACE NUMBER IN R4
] 'RETURN






>ERROR
R 0
;@HEX
REFR
HALT

>VCSTART

INC 1 'MOVE TO START OF SIMULATED CLIPBOARD
STOREM 1 <CLIPOFF 'STORE CLIPBOARD OFFSET

JUMP <EMUSTART 'COMMENT OUT AFTER DEBUG!!
MOVE &HA000 0 'ERASE EVERYTHING IN RAM PAST A000
COPY 0 13
COPY 0 14
REFR

>ERASERLOOP
STOREIR 0 0 'ERASE [R0]
INC 0 'R0++
JNI 0 0 <ERASERLOOP 'DONE YET?

'EMULATOR REGISTER LAYOUT
'R0=CURRENT INSTRUCTION
'R1-4=ARGUMENTS
'R1-8=SCRATCH (NOT ALL ARGUMENTS ARE USED)
'R9=FLAGS (LOCK = B15, FLAG = B0)
'R10=CURRENT IP FOR ARGFINDING

>EMUSTART
MOVE <STACK11 11 'MOVE TO SMALL STACKS
MOVE <STACK12 12
LOADM <RD 13 'SET UP SCREENS
LOADM <RE 14 'SET UP SCREENS
REFR

>FETCH
LOADM <RF 10 'GET RF
LOADR 10 0 'GET INSTRUCTION

'DEBUG LINE, SHOWS INSTRUCTION AT WATCHP
'>DBL ILOADR <ILIST 0 1 STOREM 1 <INSTRUCTION

JLI+ 56 0 <NOP 'NOP? '!REENABLE AFTER DEBUG

ILOADR <ILIST 0 15 'JUMP TO INSTRUCTION

>NOP
I 1 <IIP
JUMP <FETCH

>SWAP
<ARGF1 'R1=PACKED REGISTERS
I 2 <IIP
FUNC _1 <REGSPLIT2 'GET REGISTERS
REC &B110 'RECEIVE REGISTERS
ILOADR <R0 1 5 'GET R1
ILOADR <R0 2 6 'GET R2
ISTORER 5 2 <R0 'STORE R2
ISTORER 6 1 <R0 'STORE R2
JUMP <FETCH

>COPY
<ARGF1 'R1=PACKED REGISTERS
I 2 <IIP
FUNC _1 <REGSPLIT2 'GET REGISTERS
REC &B110 'RECEIVE REGISTERS
ILOADR <R0 1 5 'GET R1
ISTORER 5 2 <R0 'STORE R2
JUMP <FETCH

>MOVE
<ARGF2 'NUMBER, DESTINATION IN R1-2
I 3 <IIP
ANDI &HF 2 = 'VALIDATE REGISTER
ISTORER 1 2 <R0
JUMP <FETCH

>INC
<ARGF1 'R1=REGISTER
I 2 <IIP
ANDI &HF 1 = 'VALIDATE REGISTER
ADDI <R0 1 = % 'CREATE POINTER
INC ,1 'INCREMENT REGISTER
JGI- -1 9 <FETCH 'LOCKED?

'FLAG ISN'T LOCKED, UPDATE IT
JNI 0 ,1 <FZERO 'IS REGISTER 0?
MOVE 1 9 'UPDATE FLAG
JUMP <FETCH

>FZERO
MOVE 0 9
JUMP <FETCH

>DEC
<ARGF1 'R1=REGISTER
I 2 <IIP
ANDI &HF 1 = 'VALIDATE REGISTER
ADDI <R0 1 = % 'CREATE POINTER
DEC ,1 'INCREMENT REGISTER
JGI- -1 9 <FETCH 'LOCKED?

'FLAG ISN'T LOCKED, UPDATE IT
JNI -1 ,1 <FZERO 'IS REGISTER -1?
MOVE 1 9 'UPDATE FLAG
JUMP <FETCH

>FLOCK
I 1 <IIP
ORI &H8000 9 = 'SET FLAG LOCK
JUMP <FETCH

>REFR
I 1 <IIP
LOADM <RD 13 'GET UDP
LOADM <RE 14 'GET LDP
REFR
JUMP <FETCH

>VSYNC
<ARGF1
I 2 <IIP
ANDI &HF 1 = 'VALIDATE REGISTER
ADDI <R0 1 = % 'FORM POINTER
VSYNCR ,1
JUMP <FETCH

>HALT
HALT

>LOADM
<ARGF2
I 3 <IIP
ANDI &HF 2 = 'VALIDATE REGISTER
LOADR 1 = 'LOAD FROM MEMORY
ISTORER 1 2 <R0
JUMP <FETCH

>LOADR
<ARGF1
I 2 <IIP
FUNC _1 <REGSPLIT2
REC &B110
ILOADR <R0 1 3 'GET REGISTER 1
LOADR 3 = 'GET MEM CONTENTS
ISTORER 3 2 <R0
JUMP <FETCH

>STOREM
<ARGF2
I 3 <IIP
ANDI &HF 1 = 'VALIDATE REGISTER
'R1=REG
'R2=ADDRESS
ILOADR <R0 1 = 'GET REG
STORER 1 2
JUMP <FETCH

>STORER
<ARGF1
I 2 <IIP
FUNC _1 <REGSPLIT2
REC &B110
ILOADR <R0 1 = 'GET REGISTER 1
ILOADR <R0 2 = 'GET REGISTER 2
STORER 1 2
JUMP <FETCH

>DATALOAD
<ARGF1
I 2 <IIP
FUNC _1 <REGSPLIT2
REC &B110
ILOADR <R0 1 = 'GET REGISTER 1 (NAME)
ILOADR <R0 2 = 'GET REGISTER 2 (OFFSET)
COMPILE 1 2 % % 'LOAD!
JUMP <FETCH

>DATASAVE
<ARGF1
I 2 <IIP
FUNC _1 <REGSPLIT3
REC &B1110
ILOADR <R0 1 = 'R1=START
ILOADR <R0 2 = 'R2=FINISH
ILOADR <R0 3 = 'R3=NAME
FUNC &B110 <SE_LL 'CONVERT TO LLFORMAT
REC &B110 'RECOVER
INC 2 'INC LEN
DATASAVE 1 2 3 %
JUMP <FETCH

>TEXTLOAD
<ARGF1
I 2 <IIP
FUNC _1 <REGSPLIT2
REC &B110
ILOADR <R0 1 = 'GET REGISTER 1 (NAME)
ILOADR <R0 2 = 'GET REGISTER 2 (OFFSET)
LOAD 1 2 % % 'LOAD!
JUMP <FETCH

>TEXTSAVE
<ARGF1
I 2 <IIP
FUNC _1 <REGSPLIT3
REC &B1110
ILOADR <R0 1 = 'R1=START
ILOADR <R0 2 = 'R2=FINISH
ILOADR <R0 3 = 'R3=NAME
FUNC &B110 <SE_LL 'CONVERT TO LLFORMAT
REC &B110 'RECOVER
INC 2 'INC LEN
SAVE 1 2 3 %
JUMP <FETCH

>ADDR
<ARGF1
I 2 <IIP
FUNC _1 <REGSPLIT2
REC &B110
ILOADR <R0 1 = 'GET REGISTER 1 (SOURCE)
ILOADR <R0 2 3 'GET REGISTER 2 (DESTINATION)
ADDR 1 3 4 5 'GET RESULT+OVERFLOW
ISTORER 4 2 <R0 'WRITE OUT RESULT
JGI- 0 9 <FETCH 'IS FLAG LOCKED?
COPY 5 9 'SET FLAG
JUMP <FETCH

>ADDI
<ARGF2
I 3 <IIP
ANDI &HF 2 = 'VALIDATE REGISTER
ILOADR <R0 2 3 'GET REGISTER
ADDR 1 3 4 5
ISTORER 4 2 <R0 'WRITE OUT RESULT
JGI- 0 9 <FETCH 'IS FLAG LOCKED?
COPY 5 9 'SET FLAG
JUMP <FETCH

>SUBR
<ARGF1
I 2 <IIP
FUNC _1 <REGSPLIT2
REC &B110
ILOADR <R0 1 = 'GET REGISTER 1 (SOURCE)
ILOADR <R0 2 3 'GET REGISTER 2 (DESTINATION)
SUBR 1 3 4 5 'GET RESULT+OVERFLOW
ISTORER 4 2 <R0 'WRITE OUT RESULT
JGI- 0 9 <FETCH 'IS FLAG LOCKED?
COPY 5 9 'SET FLAG
JUMP <FETCH

>SUBI
<ARGF2
I 3 <IIP
ANDI &HF 2 = 'VALIDATE REGISTER
ILOADR <R0 2 3 'GET REGISTER
SUBR 1 3 4 5
ISTORER 4 2 <R0 'WRITE OUT RESULT
JGI- 0 9 <FETCH 'IS FLAG LOCKED?
COPY 5 9 'SET FLAG
JUMP <FETCH

>MULR
<ARGF1
I 2 <IIP
FUNC _1 <REGSPLIT2
REC &B110
ILOADR <R0 1 = 'GET REGISTER 1 (SOURCE)
ILOADR <R0 2 3 'GET REGISTER 2 (DESTINATION)
MULR 1 3 5 4 'GET RESULT+OVERFLOW
ISTORER 4 2 <R0 'WRITE OUT RESULT
JGI- 0 9 <FETCH 'IS FLAG LOCKED?
TRUE 5 9 'SET FLAG
JUMP <FETCH

>MULI
<ARGF2
I 3 <IIP
ANDI &HF 2 = 'VALIDATE REGISTER
ILOADR <R0 2 3 'GET REGISTER
MULR 1 3 5 4
ISTORER 4 2 <R0 'WRITE OUT RESULT
JGI- 0 9 <FETCH 'IS FLAG LOCKED?
TRUE 5 9 'SET FLAG
JUMP <FETCH

>DIVR
<ARGF1
I 2 <IIP
FUNC _1 <REGSPLIT2
REC &B110
ILOADR <R0 1 = 'GET REGISTER 1 (SOURCE)
ILOADR <R0 2 3 'GET REGISTER 2 (DESTINATION)
DIVR 1 3 % 4 'GET RESULT
ISTORER 4 2 <R0 'WRITE OUT RESULT
JUMP <FETCH

>DIVI
<ARGF2
I 3 <IIP
ANDI &HF 2 = 'VALIDATE REGISTER
ILOADR <R0 2 3 'GET REGISTER
DIVR 1 3 % 4 'GET RESULT
ISTORER 4 2 <R0 'WRITE OUT RESULT
JUMP <FETCH

>MODR
<ARGF1
I 2 <IIP
FUNC _1 <REGSPLIT2
REC &B110
ILOADR <R0 1 = 'GET REGISTER 1 (SOURCE)
ILOADR <R0 2 3 'GET REGISTER 2 (DESTINATION)
DIVR 1 3 4 % 'GET RESULT
ISTORER 4 2 <R0 'WRITE OUT RESULT
JUMP <FETCH

>MODI
<ARGF2
I 3 <IIP
ANDI &HF 2 = 'VALIDATE REGISTER
ILOADR <R0 2 3 'GET REGISTER
DIVR 1 3 4 % 'GET RESULT
ISTORER 4 2 <R0 'WRITE OUT RESULT
JUMP <FETCH

>ANDR
<ARGF1
I 2 <IIP
FUNC _1 <REGSPLIT2
REC &B110
ILOADR <R0 1 = 'GET REGISTER 1 (SOURCE)
ILOADR <R0 2 3 'GET REGISTER 2 (DESTINATION)
ANDR 1 3 4 'GET RESULT
ISTORER 4 2 <R0 'WRITE OUT RESULT
JUMP <FETCH

>ANDI
<ARGF2
I 3 <IIP
ANDI &HF 2 = 'VALIDATE REGISTER
ILOADR <R0 2 3 'GET REGISTER
ANDR 1 3 4 'GET RESULT
ISTORER 4 2 <R0 'WRITE OUT RESULT
JUMP <FETCH

>ORR
<ARGF1
I 2 <IIP
FUNC _1 <REGSPLIT2
REC &B110
ILOADR <R0 1 = 'GET REGISTER 1 (SOURCE)
ILOADR <R0 2 3 'GET REGISTER 2 (DESTINATION)
ORR 1 3 4 'GET RESULT
ISTORER 4 2 <R0 'WRITE OUT RESULT
JUMP <FETCH

>ORI
<ARGF2
I 3 <IIP
ANDI &HF 2 = 'VALIDATE REGISTER
ILOADR <R0 2 3 'GET REGISTER
ORR 1 3 4 'GET RESULT
ISTORER 4 2 <R0 'WRITE OUT RESULT
JUMP <FETCH

>XORR
<ARGF1
I 2 <IIP
FUNC _1 <REGSPLIT2
REC &B110
ILOADR <R0 1 = 'GET REGISTER 1 (SOURCE)
ILOADR <R0 2 3 'GET REGISTER 2 (DESTINATION)
XORR 1 3 4 'GET RESULT
ISTORER 4 2 <R0 'WRITE OUT RESULT
JUMP <FETCH

>XORI
<ARGF2
I 3 <IIP
ANDI &HF 2 = 'VALIDATE REGISTER
ILOADR <R0 2 3 'GET REGISTER
XORR 1 3 4 'GET RESULT
ISTORER 4 2 <R0 'WRITE OUT RESULT
JUMP <FETCH

>NOT
<ARGF1
I 2 <IIP
ANDI &HF 1 = 'VALIDATE REGISTER
ILOADR <R0 1 2 'GET REGISTER
NOT 2 = 'INVERT REGISTER
ISTORER 2 1 <R0 'WRITE OUT
JUMP <FETCH

>TOUCH
<ARGF1
I 2 <IIP
FUNC _1 <REGSPLIT3 'GET THREE REGISTERS
REC &B1110
ADDI <R0 1 = % 'FORM POINTERS
ADDI <R0 2 = % 'FORM POINTERS
ADDI <R0 3 = % 'FORM POINTERS
TOUCH ,2 ,3 ,1 'WRITE TOUCH
TRUE ,1 = 'RESTRICT DURATION
JUMP <FETCH

>CLIP
<ARGF1
I 2 <IIP
FUNC _1 <REGSPLIT2
REC &B110
ILOADR <R0 1 = 'GET SOURCE
ADDR <CLIPOFF 1 = % 'OFFSET
CLIPR 1 = 'GET CLIP CHR
ISTORER 1 2 <R0 'WRITE OUT
JUMP <FETCH

>BUTTON
<ARGF1
I 2 <IIP
ANDI &HF 1 = 'VALIDATE REGISTER
BUTTON 2 'GET BUTTON
ISTORER 2 1 <R0 'WRITE OUT
JUMP <FETCH

>OUT
<ARGF1
I 2 <IIP
ANDI &HF 1 = 'VALIDATE REGISTER
ILOADR <R0 1 = 'GET SOURCE
OUT 1
JUMP <FETCH

>BEEP
<ARGF1
I 2 <IIP
FUNC _1 <REGSPLIT2
REC &B110
ILOADR <R0 1 = 'GET INSTRUMENT
ILOADR <R0 2 = 'GET PITCH
BEEP 1 2
JUMP <FETCH

>PUSH
<ARGF1
I 2 <IIP
FUNC _1 <REGSPLIT2
REC &B110
ILOADR <R0 1 = 'GET PUSH VALUE
ADDI <R0 2 = % 'GET SP LOCATION
STORER 1 ,2 'STORE VALUE
DEC ,2 'DEC SP
JUMP <FETCH

>POP
<ARGF1
I 2 <IIP
FUNC _1 <REGSPLIT2
REC &B110
ADDI <R0 1 = % 'GET SP LOCATION
ADDI <R0 2 = % 'FORM REG POINTER
INC ,1 'INC SP
LOADR ,1 ,2 'WRITE RESULT
JUMP <FETCH

>FNOT
I 1 <IIP
XORI 1 9 = 'INVERT FLAG
JUMP <FETCH

>JUMP
<ARGF1
STOREM 1 <RF 'SET RF
JUMP <FETCH

>CJUMP
ANDI 1 9 = 'UNLOCK FLAG
JEI 1 9 <JUMP 'FLAG SET, JUMP
I 2 <IIP 'DON'T JUMP
JUMP <FETCH

>JIE
<ARGF2
I 3 <IIP
FUNC _1 <REGSPLIT2
REC &B11000 'R3,4=REGISTERS TO COMPARE
ILOADR <R0 3 = 'GET REGISTERS
ILOADR <R0 4 = 'GET REGISTERS
JER 3 4 <GOJUMP 'JUMP?
JUMP <FETCH

>GOJUMP
STOREM 2 <RF 'SET RF
JUMP <FETCH

>JIN
<ARGF2
I 3 <IIP
FUNC _1 <REGSPLIT2
REC &B11000 'R3,4=REGISTERS TO COMPARE
ILOADR <R0 3 = 'GET REGISTERS
ILOADR <R0 4 = 'GET REGISTERS
JNR 3 4 <GOJUMP 'JUMP?
JUMP <FETCH

>JIL
<ARGF2
I 3 <IIP
FUNC _1 <REGSPLIT2
REC &B11000 'R3,4=REGISTERS TO COMPARE
ILOADR <R0 3 = 'GET REGISTERS
ILOADR <R0 4 = 'GET REGISTERS
JLR+ 3 4 <GOJUMP 'JUMP?
JUMP <FETCH

>JIG
<ARGF2
I 3 <IIP
FUNC _1 <REGSPLIT2
REC &B11000 'R3,4=REGISTERS TO COMPARE
ILOADR <R0 3 = 'GET REGISTERS
ILOADR <R0 4 = 'GET REGISTERS
JGR+ 3 4 <GOJUMP 'JUMP?
JUMP <FETCH

>CALL
<ARGF2
I 3 <IIP
ANDI &HF 1 = 'VALIDATE REGISTER
ADDI <R0 1 = % 'CREATE POINTER
STORER <RF ,1 'PUT VALUE ON STACK
DEC ,1 'DEC SP
COPY 2 <RF 'EFFECT CALL
JUMP <FETCH

>RETURN
<ARGF1
ANDI &HF 1 = 'VALIDATE REGISTER
ADDI <R0 1 = % 'CREATE POINTER
INC ,1 'INC SP
LOADR ,1 <RF 'GET RETURN ADDRESS
JUMP <FETCH

>ZERO
<ARGF2
I 3 <IIP
ANDI &HF 1 = 'VALIDATE REGISTER
ILOADR <R0 1 = 'GET REGISTER
JEI 0 1 <GOJUMP 'JUMP?
JUMP <FETCH

>FPUSH 'MAY INTRODUCE INCOMPATIBILITY!
<ARGF1
I 2 <IIP
ANDI &HF 1 = 'VALIDATE REGISTER
ADDI <R0 1 = % 'CREATE POINTER
STORER 9 ,1 'PUT VALUE ON STACK
DEC ,1
JUMP <FETCH

>FPOP
<ARGF1
I 2 <IIP
ANDI &HF 1 = 'VALIDATE REGISTER
ADDI <R0 1 = % 'CREATE POINTER
INC ,1
LOADR ,1 9 'GET FLAGS
JUMP <FETCH

>RND
<ARGF1
I 2 <IIP
ANDI &HF 1 = 'VALIDATE REGISTER
RND 2
ISTORER 2 1 <R0 'STORE RND NUMBER
JUMP <FETCH

>MIL
<ARGF1
I 2 <IIP
ANDI &HF 1 = 'VALIDATE REGISTER
MIL 2 =
ISTORER 2 1 <R0 'STORE RND NUMBER
JUMP <FETCH

>MPUSH
<ARGF2
I 3 <IIP
ANDI &HF 2 = 'VALIDATE REGISTER
ADDI <R0 2 = % 'CREATE POINTER
STORER 1 ,2 'WRITE OUT
DEC ,2
JUMP <FETCH





>IIP
ADDR .11 <RF = % 'ADD PARAMETER
LOADM <RF 8 'SET RF
]

'SETS UP REGISTERS FOR N-ARGUMENT INSTRUCTION
>ARGF3 ILOADR 3 10 3
>ARGF2 ILOADR 2 10 2
>ARGF1 ILOADR 1 10 1
]

>SE_LL 'COPIED FROM LIBRARY
SUBR .11 ,11 .11 % 'SUB END FROM START
TWO .11 = 'INVERT FOR FINAL ANSWER
]
'SPLIT DOWN REGISTERS

>REGSPLIT3
PR &B111 &B1 'GET PACKED R
ANDI &HF 0 2 'GET R3

ANDI &HF0 0 1
RIGHTI 4 1 = % 'GET R2

ANDI &HF00 0 =
RIGHTI 8 0 = % 'GET R1
SRE &B111 &B111

>REGSPLIT2
PR &B11 &B1 'GET PACKED R
ANDI &HF 0 1 'GET R2

ANDI &HF0 0 =
RIGHTI 4 0 = % 'GET R1

SRE &B11 &B11

>REGSPLIT1
ANDI &HF .11 = 'GET R1
]




'INSTRUCTION LIST
>ILIST
<NOP
<SWAP
<COPY
<MOVE
<INC
<DEC
<FLOCK
<REFR
<VSYNC
<HALT
<LOADM
<LOADR
<STOREM
<STORER
<DATALOAD
<DATASAVE
<TEXTLOAD
<TEXTSAVE
<ADDR
<ADDI
<SUBR
<SUBI
<MULR
<MULI
<DIVR
<DIVI
<MODR
<MODI
<ANDR
<ANDI
<ORR
<ORI
<XORR
<XORI
<NOT
<TOUCH
<CLIP
<BUTTON
<OUT
<BEEP
<PUSH
<POP
<FNOT
<JUMP
<CJUMP
<JIE
<JIN
<JIL
<JIG
<CALL
<RETURN
<ZERO
<FPUSH
<FPOP
<RND
<MIL
<MPUSH

'STACK SPACE (TO NOT INTERFERE WITH SIMULATED STACKS)
+&H20
>STACK12
+&H20
>STACK11

'CLIPBOARD OFFSET
>CLIPOFF 0

'CURRENT INSTRUCTION
@ >INSTRUCTION 0

'REGISTERS
>R0 0
>R1 0
>R2 0
>R3 0
>R4 0
>R5 0
>R6 0
>R7 0
>R8 0
>R9 0
>RA 0
>RB 0
>RC 0
>RD 0
>RE 0
>RF 0

