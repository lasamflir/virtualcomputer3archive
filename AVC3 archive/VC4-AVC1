*&H100
'VIRTUAL COMPUTER 4 INTERPRETER
'COMPILES QLOADING PROGRAMS
'NEEDS TO INTERPRET ALL NUMBER FORMATS
'STOPS ON INCOMPATIBILITY
JUMP <START
*&H9000
>START
STOREIM 0 &H100 'ERASE STARTING JUMP
STOREIM 0 &H101 'ERASE STARTING JUMP
MOVE ;WTN_LOC 14 'PLACE BUFFER ON DISPLAY
MOVE 0 0 'R0=MEMORY CURSOR
MOVE 0 1 'R1=CLIPBOARD CURSOR
COPY 0 13 'PLACE VC4 MEMORY ON SCREEN
'R2=NUMBUFFER CURSOR
'R3=CLP CHARACTER
'R4=CLP WORD
'R5=CHECK REGISTER
'R6=SCREEN DRIFT
REFR

>LOADLOOP
SUBR 13 0 6 % 'GET SCREEN DRIFT
JGI+ &H300 6 <DSKIP 'SKIP DRIFT CORRECTION
ADDI &H300 13 = % 'CORRECT SCREEN DRIFT
JUMP <LOADLOOP

>DSKIP
CLIPR 1 3 'GET CLIPBOARD CHR
JEI !! 3 <VCSTART 'START?
JEI 0 3 <VCSTART 'START?
JEI !+ 3 <RELREL 'RELATIVE RELOCATION?
JEI !* 3 <ABSREL 'ABSOLUTE RELOCATION?
JEI !# 3 <DATA 'NUMBER?
JEI !: 3 <DATA 'INSTRUCTION?
INC 1
JUMP <LOADLOOP

>RELREL
REFR
<LINELOAD
ADDR 4 0 = % 'UPDATE MEMORY CURSOR
COPY 0 13 'PLACE ON SCREEN
JUMP <LOADLOOP

>ABSREL
REFR
<LINELOAD
COPY 4 0 'UPDATE MEMORY CURSOR
COPY 0 13 'PLACE ON SCREEN
JUMP <LOADLOOP

>DATA
<LINELOAD
LOADR 0 5 'CHECK MEMORY CELL
JNI 0 5 <ERROR 'STOP IF OVERWRITING CODE
STORER 4 0 'WRITE MEMORY CELL
REFR
INC 0 'MOVE TO NEXT CELL
JUMP <LOADLOOP

'LOAD A NUMBER IN UNTIL THE NEWLINE TO THE BUFFER, AND RETURN ITS VALUE
>LINELOAD
MOVE ;WTN_LOC 2 'NUMBUFFER CURSOR
INC 1 'MOVE ONTO START OF NUMBER
I ;WTN_LOC
;@BLOCK 'ERASE THE NUMBUFFER
;@ERASE

>LLLOOP
CLIPR 1 3 'GET CLIPBOARD CHR
JEI 10 3 <LINEEND 'END OF LINE?
JEI 0 3 <LINEEND 'END OF LINE?
STORER 3 2 'WRITE TO NUMBUFFER
INC 1 'INCREMENT CLIPBOARD COUNTER
INC 2 'INCREMENT BUFFER COUNTER
JUMP <LLLOOP

>LINEEND
I ;WTN_LOC
;@BLOCK 'FIND NUMBER
;@SBNUMTOWORD 'GET WORD FROM NUMBER
INC 1 'INCREMENT CLIPBOARD COUNTER
G 4 'PLACE NUMBER IN R4
] 'RETURN






>ERROR
R 0
;@HEX
REFR
HALT

>VCSTART

INC 1 'MOVE TO START OF SIMULATED CLIPBOARD
STOREM 1 <CLIPOFF 'STORE CLIPBOARD OFFSET

JUMP <EMUSTART 'COMMENT OUT AFTER DEBUG!!
MOVE &HA000 0 'ERASE EVERYTHING IN RAM PAST A000
COPY 0 13
COPY 0 14
REFR

>ERASERLOOP
STOREIR 0 0 'ERASE [R0]
INC 0 'R0++
JNI 0 0 <ERASERLOOP 'DONE YET?

'EMULATOR REGISTER LAYOUT
'R0=CURRENT INSTRUCTION
'R1-4=ARGUMENTS
'R1-8=SCRATCH (NOT ALL ARGUMENTS ARE USED)
'R9=FLAGS
'R10=CURRENT IP FOR ARGFINDING

>EMUSTART
MOVE <STACK11 11 'MOVE TO SMALL STACKS
MOVE <STACK12 12
LOADM <RD 13 'SET UP SCREENS
LOADM <RE 14 'SET UP SCREENS
REFR

>FETCH
LOADM <RF 10 'GET RF
LOADR 10 0 'GET INSTRUCTION
JLI+ 67 0 <NOP 'NOP?

'DEBUG LINE, SHOWS INSTRUCTION AT WATCHP
'ILOADR <ILIST 0 1 STOREM 1 <INSTRUCTION REFR

ILOADR <ILIST 0 15 'JUMP TO INSTRUCTION

>NOP
I 1 <IIP
JUMP <FETCH

>SWAP '1
<ARGF2
I 3 <IIP
ILOADR <R0 1 5 'GET R1
ILOADR <R0 2 6 'GET R2
ISTORER 5 2 <R0 'STORE R2
ISTORER 6 1 <R0 'STORE R2
JUMP <FETCH

>COPY '2
<ARGF2
I 3 <IIP
ILOADR <R0 1 = 'GET R1
ISTORER 1 2 <R0 'STORE IN R2
JUMP <FETCH

>MOVE '3
<ARGF2
I 3 <IIP
ISTORER 1 2 <R0 'SET REGISTER
JUMP <FETCH

>INC '4
<ARGF1
I 2 <IIP
ILOADR <R0 1 2 'GET REGISTER
INC 2 'ADD ONE
ISTORER 2 1 <R0 'SET REGISTER
ANDI &B1110 9 = 'RESET OVERFLOW FLAG
JNI 0 2 <FETCH 'NO OVERFLOW?
ORI &B0001 9 = 'SET OVERFLOW FLAG
JUMP <FETCH 'OVERFLOW CASE

>DEC '5
<ARGF1
I 2 <IIP
ILOADR <R0 1 2 'GET REGISTER
DEC 2 'ADD ONE
ISTORER 2 1 <R0 'SET REGISTER
ANDI &B1110 9 = 'RESET OVERFLOW FLAG
JNI &HFFFF 2 <FETCH 'NO OVERFLOW?
ORI &B0001 9 = 'SET OVERFLOW FLAG
JUMP <FETCH 'OVERFLOW CASE

>REFR '6
I 1 <IIP
LOADM <RD 13 'CORRECT SCREEN OFFSETS
LOADM <RE 14
REFR 'REFRESH
JUMP <FETCH

>VSYNC '7
<ARGF1
I 2 <IIP
ILOADR <R0 1 = 'GET REGISTER
VSYNCR 1 'WAIT
JUMP <FETCH

>LOADM '8
<ARGF2
I 3 <IIP
LOADR 1 = 'LOAD M
ISTORER 1 2 <R0 'STORE IN SR
JUMP <FETCH

>LOADR '9
<ARGF2
I 3 <IIP
ILOADR <R0 1 = 'GET REGISTER
LOADR 1 = 'LOAD FROM REGISTER
ISTORER 1 2 <R0 'STORE IN SR
JUMP <FETCH

>STOREM '10
<ARGF2
I 3 <IIP
ILOADR <R0 1 = 'GET REGISTER
STORER 1 2 'STORE IN M
JUMP <FETCH

>STORER '11
<ARGF2
I 3 <IIP
ILOADR <R0 1 = 'GET REGISTER
ILOADR <R0 2 = 'GET REGISTER
STORER 1 2 'STORE IN [REGISTER]
JUMP <FETCH

>DATALOAD '12
<ARGF2
I 3 <IIP
ILOADR <R0 1 = 'GET REGISTER
ILOADR <R0 2 = 'GET REGISTER
COMPILE 1 2 3 = 'PERFORM DATALOAD
ANDI &B1011 9 = 'RESET LOAD FLAG
JEI 0 3 <FETCH 'UNSUCCESSFUL LOAD?
ORI &B0100 9 = 'SET LOAD FLAG
JUMP <FETCH 'OVERFLOW CASE

>TEXTLOAD '13
<ARGF2
I 3 <IIP
ILOADR <R0 1 = 'GET REGISTER
ILOADR <R0 2 = 'GET REGISTER
LOAD 1 2 3 = 'PERFORM DATALOAD
ANDI &B1011 9 = 'RESET LOAD FLAG
JEI 0 3 <FETCH 'UNSUCCESSFUL LOAD?
ORI &B0100 9 = 'SET LOAD FLAG
JUMP <FETCH 'OVERFLOW CASE

>DATASAVE '14
<ARGF3
I 4 <IIP
'CONVERT START AND END FORMAT OF VC4 TO LOCATION AND LENGTH FORMAT OF VC8
ILOADR <R0 1 = 'GET R1
ILOADR <R0 2 = 'GET R2
ILOADR <R0 3 = 'GET R3
FUNC &B110 <SE_LL 'CONVERT
REC &B110 'GET RESULT
DATASAVE 1 2 3 =
ANDI &B0111 9 = 'RESET SAVE FLAG
JEI 0 3 <FETCH 'UNSUCCESSFUL SAVE?
ORI &B1000 9 = 'SET SAVE FLAG
JUMP <FETCH 'OVERFLOW CASE

>TEXTSAVE '15
<ARGF3
I 4 <IIP
'CONVERT START AND END FORMAT OF VC4 TO LOCATION AND LENGTH FORMAT OF VC8
ILOADR <R0 1 = 'GET R1
ILOADR <R0 2 = 'GET R2
ILOADR <R0 3 = 'GET R3
FUNC &B110 <SE_LL 'CONVERT
REC &B110 'GET RESULT
SAVE 1 2 3 =
ANDI &B0111 9 = 'RESET SAVE FLAG
JEI 0 3 <FETCH 'UNSUCCESSFUL SAVE?
ORI &B1000 9 = 'SET SAVE FLAG
JUMP <FETCH 'OVERFLOW CASE

>ADDR '16
<ARGF2
I 3 <IIP
ILOADR <R0 1 = 'GET R1
ILOADR <R0 2 3 'GET R2
ADDR 1 3 4 5
ISTORER 4 2 <R0 'SET R2
ANDI &B1110 9 = 'RESET O/F FLAG
JEI 0 5 <FETCH 'OVERFLOW?
ORI &B0001 9 = 'SET FLAG
JUMP <FETCH 'OVERFLOW CASE

>ADDI '17
<ARGF2
I 3 <IIP
ILOADR <R0 2 3 'GET R2
ADDR 1 3 4 5
ISTORER 4 2 <R0 'SET R2
ANDI &B1110 9 = 'RESET O/F FLAG
JEI 0 5 <FETCH 'OVERFLOW?
ORI &B0001 9 = 'SET FLAG
JUMP <FETCH 'OVERFLOW CASE

>SUBR '18
<ARGF2
I 3 <IIP
ILOADR <R0 1 = 'GET R1
ILOADR <R0 2 3 'GET R2
SUBR 1 3 4 5
ISTORER 4 2 <R0 'SET R2
ANDI &B1110 9 = 'RESET O/F FLAG
JEI 0 5 <FETCH 'OVERFLOW?
ORI &B0001 9 = 'SET FLAG
JUMP <FETCH 'OVERFLOW CASE

>SUBI '19
<ARGF2
I 3 <IIP
ILOADR <R0 2 3 'GET R2
SUBR 1 3 4 5
ISTORER 4 2 <R0 'SET R2
ANDI &B1110 9 = 'RESET O/F FLAG
JEI 0 5 <FETCH 'OVERFLOW?
ORI &B0001 9 = 'SET FLAG
JUMP <FETCH 'OVERFLOW CASE

>MULR '20
<ARGF2
I 3 <IIP
ILOADR <R0 1 = 'GET R1
ILOADR <R0 2 3 'GET R2
MULR 1 3 5 4
ISTORER 4 2 <R0 'SET R2
ANDI &B1110 9 = 'RESET O/F FLAG
JEI 0 5 <FETCH 'OVERFLOW?
ORI &B0001 9 = 'SET FLAG
JUMP <FETCH 'OVERFLOW CASE

>MULI '21
<ARGF2
I 3 <IIP
ILOADR <R0 2 3 'GET R2
MULR 1 3 5 4
ISTORER 4 2 <R0 'SET R2
ANDI &B1110 9 = 'RESET O/F FLAG
JEI 0 5 <FETCH 'OVERFLOW?
ORI &B0001 9 = 'SET FLAG
JUMP <FETCH 'OVERFLOW CASE

>DIVR '22
<ARGF2
I 3 <IIP
ILOADR <R0 1 = 'GET R1
ILOADR <R0 2 3 'GET R2
JEI 0 1 <DIVF 'SET DIVIDE FLAGS?
DIVR 1 3 % 4
ISTORER 4 2 <R0 'SET R2
ANDI &B1101 9 = 'RESET X/0 FLAG
JUMP <FETCH

>DIVI '23
<ARGF2
I 3 <IIP
ILOADR <R0 2 3 'GET R2
JEI 0 1 <DIVF 'SET DIVIDE FLAGS?
DIVR 1 3 % 4
ISTORER 4 2 <R0 'SET R2
ANDI &B1101 9 = 'RESET X/0 FLAG
JUMP <FETCH

>MODR '24
<ARGF2
I 3 <IIP
ILOADR <R0 1 = 'GET R1
ILOADR <R0 2 3 'GET R2
JEI 0 1 <DIVF 'SET DIVIDE FLAGS?
DIVR 1 3 4 %
ISTORER 4 2 <R0 'SET R2
ANDI &B1101 9 = 'RESET X/0 FLAG
JUMP <FETCH

>MODI '25
<ARGF2
I 3 <IIP
ILOADR <R0 2 3 'GET R2
JEI 0 1 <DIVF 'SET DIVIDE FLAGS?
DIVR 1 3 4 %
ISTORER 4 2 <R0 'SET R2
ANDI &B1101 9 = 'RESET X/0 FLAG
JUMP <FETCH

>DIVF
ORI &B0010 9 = 'SET X/0 FLAG
JUMP <FETCH

>ANDR '26
<ARGF2
I 3 <IIP
ILOADR <R0 1 = 'GET R1
ILOADR <R0 2 3 'GET R2
ANDR 1 3 =
ISTORER 3 2 <R0 'SET R2
JUMP <FETCH

>ANDI '27
<ARGF2
I 3 <IIP
ILOADR <R0 2 3 'GET R2
ANDR 1 3 =
ISTORER 3 2 <R0 'SET R2
JUMP <FETCH

>ORR '28
<ARGF2
I 3 <IIP
ILOADR <R0 1 = 'GET R1
ILOADR <R0 2 3 'GET R2
ORR 1 3 =
ISTORER 3 2 <R0 'SET R2
JUMP <FETCH

>ORI '29
<ARGF2
I 3 <IIP
ILOADR <R0 2 3 'GET R2
ORR 1 3 =
ISTORER 3 2 <R0 'SET R2
JUMP <FETCH

>XORR '30
<ARGF2
I 3 <IIP
ILOADR <R0 1 = 'GET R1
ILOADR <R0 2 3 'GET R2
XORR 1 3 =
ISTORER 3 2 <R0 'SET R2
JUMP <FETCH

>XORI '31
<ARGF2
I 3 <IIP
ILOADR <R0 2 3 'GET R2
XORR 1 3 =
ISTORER 3 2 <R0 'SET R2
JUMP <FETCH

>NOT '32
<ARGF1
I 2 <IIP
ILOADR <R0 1 2 'GET R1
NOT 2 = 'INVERT IT
ISTORER 2 1 <R0 'SET R1
JUMP <FETCH

>RND '33
<ARGF1
I 2 <IIP
RND 2
ISTORER 2 1 <R0 'SET R1
JUMP <FETCH

>TOUCH '34
<ARGF3
I 4 <IIP
TOUCH 5 6 4 'GET TOUCH
JEI 0 4 <T0SKIP 'IS T==0?
MOVE 1 4 'SET T TO 1

>T0SKIP
ISTORER 4 1 <R0 'SET R1
ISTORER 5 2 <R0 'SET R2
ISTORER 6 3 <R0 'SET R3
JUMP <FETCH

>CLIPR '35
<ARGF2
I 3 <IIP
ILOADR <R0 1 = 'GET R1
LOADM <CLIPOFF 3 'GET CLIP OFFSET
ADDR 3 1 = % 'APPLY OFFSET
CLIPR 1 = 'GET CLIPBOARD CHR
ORI &B0001 9 = 'SET FLAG
JEI 0 1 <FETCH 'OVERFLOW?
ISTORER 1 2 <R0 'SET R2
ANDI &B1110 9 = 'RESET O/F FLAG
JUMP <FETCH 'OVERFLOW CASE

>CLIPI '36
<ARGF2
I 3 <IIP
LOADM <CLIPOFF 3 'GET CLIP OFFSET
ADDR 3 1 = % 'APPLY OFFSET
CLIPR 1 = 'GET CLIPBOARD CHR
ORI &B0001 9 = 'SET FLAG
JEI 0 1 <FETCH 'OVERFLOW?
ISTORER 1 2 <R0 'SET R2
ANDI &B1110 9 = 'RESET O/F FLAG
JUMP <FETCH 'OVERFLOW CASE

>BUTTON '37
<ARGF1
I 2 <IIP
BUTTON 2
ISTORER 2 1 <R0 'SET R1
JUMP <FETCH

>MIL '38
<ARGF1
I 2 <IIP
MIL 2 =
ISTORER 2 1 <R0 'SET R1
JUMP <FETCH

>OUT '39
<ARGF1
I 2 <IIP
ILOADR <R0 1 = 'GET R1
OUT 1 'SEND TO OUTPUT
JUMP <FETCH

>BEEPR '40
<ARGF2
I 3 <IIP
ILOADR <R0 1 = 'GET R1
ILOADR <R0 2 = 'GET R2
BEEP 1 2 'SEND TO OUTPUT
JUMP <FETCH

>BEEPI '41
<ARGF2
I 3 <IIP
ILOADR <R0 2 = 'GET R2
BEEP 1 2 'SEND TO OUTPUT
JUMP <FETCH

>PUSHR '42
<ARGF2
I 3 <IIP
ILOADR <R0 1 = 'GET R1
ILOADR <R0 2 3 'GET R2
PUSHR 1 3 'PERFORM PUSH
ISTORER 3 2 <R0 'SET R2
JUMP <FETCH

>PUSHI '43
<ARGF2
I 3 <IIP
ILOADR <R0 2 3 'GET R2
PUSHR 1 3 'PERFORM PUSH
ISTORER 3 2 <R0 'SET R2
JUMP <FETCH

>POP '44
<ARGF2
I 3 <IIP
ILOADR <R0 1 4 'GET R1 (SP)
POP 4 3 'GET POPPED VALUE
ISTORER 3 2 <R0 'SET R2
ISTORER 4 1 <R0 'SET R1
JUMP <FETCH

>FPUSH '45
<ARGF1
I 2 <IIP
ILOADR <R0 1 2 'GET R1 (SP)
PUSHR 9 2 'PUSH VALUE
ISTORER 2 1 <R0 'SET R1 (SP)
JUMP <FETCH

>FPOP '46
<ARGF1
I 2 <IIP
ILOADR <R0 1 2 'GET R1 (SP)
POP 2 9
ISTORER 2 1 <R0 'SET R1 (SP)
JUMP <FETCH

>JUMP '47
<ARGF1
STOREM 1 <RF 'SET IP
JUMP <FETCH

>XJUMP '48
<ARGF2
I 3 <IIP
JNR 1 9 <FETCH 'DON'T JUMP CASE
STOREM 2 <RF 'SET IP
JUMP <FETCH

>PJUMP '49
<ARGF2
I 3 <IIP
ANDR 9 1 =
JEI 0 1 <FETCH 'DON'T JUMP CASE
STOREM 2 <RF 'SET IP
JUMP <FETCH

>NJUMP '50
<ARGF2
I 3 <IIP
NOT 1 = 'INVERT I
NOT 9 3 'INVERT FLAGS
ANDI &HF 1 = 'RESTRICT TO 4-BIT
ANDI &HF 3 =
ANDR 3 1 =
JEI 0 1 <FETCH 'DON'T JUMP CASE
STOREM 2 <RF 'SET IP
JUMP <FETCH

>JER '51
<ARGF3
I 4 <IIP
ILOADR <R0 1 = 'GET R1
ILOADR <R0 2 = 'GET R2
JER 1 2 <COND 'CONDITIONAL JUMP?
JUMP <FETCH

>JEI '52
<ARGF3
I 4 <IIP
ILOADR <R0 2 = 'GET R2
JER 1 2 <COND 'CONDITIONAL JUMP?
JUMP <FETCH

>JNR '53
<ARGF3
I 4 <IIP
ILOADR <R0 1 = 'GET R1
ILOADR <R0 2 = 'GET R2
JNR 1 2 <COND 'CONDITIONAL JUMP?
JUMP <FETCH

>JNI '54
<ARGF3
I 4 <IIP
ILOADR <R0 2 = 'GET R2
JNR 1 2 <COND 'CONDITIONAL JUMP?
JUMP <FETCH

>JLR '55
<ARGF3
I 4 <IIP
ILOADR <R0 1 = 'GET R1
ILOADR <R0 2 = 'GET R2
JLR+ 1 2 <COND 'CONDITIONAL JUMP?
JUMP <FETCH

>JLI '56
<ARGF3
I 4 <IIP
ILOADR <R0 2 = 'GET R2
JLR+ 1 2 <COND 'CONDITIONAL JUMP?
JUMP <FETCH

>JGR '57
<ARGF3
I 4 <IIP
ILOADR <R0 1 = 'GET R1
ILOADR <R0 2 = 'GET R2
JGR+ 1 2 <COND 'CONDITIONAL JUMP?
JUMP <FETCH

>JGI '58
<ARGF3
I 4 <IIP
ILOADR <R0 2 = 'GET R2
JGR+ 1 2 <COND 'CONDITIONAL JUMP?
JUMP <FETCH

>COND 'HANDLE ALL CONDITIONAL JUMPS
STOREM 3 <RF 'SET IP
JUMP <FETCH

>CALL '59
<ARGF2
I 3 <IIP
ILOADR <R0 1 3 'GET R2
PUSHR 8 3 'PUSH RETURN ADDRESS
ISTORER 3 1 <R0 'SET R2
STOREM 2 <RF 'SET RF
JUMP <FETCH

>RETURN '60
<ARGF1
I 2 <IIP
ILOADR <R0 1 4 'GET R1 (SP)
POP 4 3 'GET POPPED VALUE
STOREM 3 <RF 'SET RF
ISTORER 4 1 <R0 'SET R1
JUMP <FETCH

>HALT '61
HALT

>LEFTR '62
<ARGF2
I 3 <IIP
ILOADR <R0 1 = 'GET R1
ILOADR <R0 2 3 'GET R2
LEFTR 1 3 4 % 'SHIFT LEFT
RIGHTR 1 4 5 % 'SHIFT BACK FOR OVERFLOW CHECK
ISTORER 4 2 <R0 'SET R2
ANDI &B1110 9 = 'RESET O/F FLAG
JER 3 5 <FETCH 'OVERFLOW?
ORI &B0001 9 = 'SET FLAG
JUMP <FETCH 'OVERFLOW CASE

>LEFTI '63
<ARGF2
I 3 <IIP
ILOADR <R0 2 3 'GET R2
LEFTR 1 3 4 % 'SHIFT LEFT
RIGHTR 1 4 5 % 'SHIFT BACK FOR OVERFLOW CHECK
ISTORER 4 2 <R0 'SET R2
ANDI &B1110 9 = 'RESET O/F FLAG
JER 3 5 <FETCH 'OVERFLOW?
ORI &B0001 9 = 'SET FLAG
JUMP <FETCH 'OVERFLOW CASE

>RIGHTR '64
<ARGF2
I 3 <IIP
ILOADR <R0 1 = 'GET R1
ILOADR <R0 2 3 'GET R2
RIGHTR 1 3 4 % 'SHIFT RIGHT
ISTORER 4 2 <R0 'SET R2
JUMP <FETCH

>RIGHTI '65
<ARGF2
I 3 <IIP
ILOADR <R0 2 3 'GET R2
RIGHTR 1 3 4 % 'SHIFT RIGHT
ISTORER 4 2 <R0 'SET R2
JUMP <FETCH

>STOREIR '66
<ARGF2
I 3 <IIP
ILOADR <R0 2 = 'GET R2
STORER 1 2 'STORE I IN R
JUMP <FETCH

>STOREIM '67
<ARGF2
I 3 <IIP
STORER 1 2 'STORE I IN M
JUMP <FETCH





>IIP
ADDR .11 <RF = % 'ADD PARAMETET
LOADM <RF 8 'SET RF
]

'SETS UP REGISTERS FOR N-ARGUMENT INSTRUCTION
>ARGF3 ILOADR 3 10 3
>ARGF2 ILOADR 2 10 2
>ARGF1 ILOADR 1 10 1
]

>SE_LL 'COPIED FROM LIBRARY
SUBR .11 ,11 .11 % 'SUB END FROM START
TWO .11 = 'INVERT FOR FINAL ANSWER
]

'INSTRUCTION LIST
>ILIST
<NOP
<SWAP
<COPY
<MOVE
<INC
<DEC
<REFR
<VSYNC
<LOADM
<LOADR
<STOREM
<STORER
<DATALOAD
<TEXTLOAD
<DATASAVE
<TEXTSAVE
<ADDR
<ADDI
<SUBR
<SUBI
<MULR
<MULI
<DIVR
<DIVI
<MODR
<MODI
<ANDR
<ANDI
<ORR
<ORI
<XORR
<XORI
<NOT
<RND
<TOUCH
<CLIPR
<CLIPI
<BUTTON
<MIL
<OUT
<BEEPR
<BEEPI
<PUSHR
<PUSHI
<POP
<FPUSH
<FPOP
<JUMP
<XJUMP
<PJUMP
<NJUMP
<JER
<JEI
<JNR
<JNI
<JLR
<JLI
<JGR
<JGI
<CALL
<RETURN
<HALT
<LEFTR
<LEFTI
<RIGHTR
<RIGHTI
<STOREIR
<STOREIM


'STACK SPACE (TO NOT INTERFERE WITH SIMULATED STACKS)
+&H20
>STACK12
+&H20
>STACK11

'CLIPBOARD OFFSET
>CLIPOFF 0

'CURRENT INSTRUCTION
>INSTRUCTION 0

'REGISTERS
>R0 0
>R1 0
>R2 0
>R3 0
>R4 0
>R5 0
>R6 0
>R7 0
>R8 0
>R9 0
>RA 0
>RB 0
>RC 0
>RD 0
>RE 0
>RF 0

